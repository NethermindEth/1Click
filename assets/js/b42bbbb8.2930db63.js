"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5053],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},c=Object.keys(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var a=o.createContext({}),l=function(e){var t=o.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(a.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,k=d["".concat(a,".").concat(u)]||d[u]||h[u]||c;return n?o.createElement(k,i(i({ref:t},p),{},{components:n})):o.createElement(k,i({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,i=new Array(c);i[0]=d;var s={};for(var a in t)hasOwnProperty.call(t,a)&&(s[a]=t[a]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<c;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6699:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>l});var o=n(7462),r=(n(7294),n(3905));const c={id:"setting-checkpoint-sync",sidebar_position:8},i="Setting Checkpoint Sync",s={unversionedId:"quickstart/samples/setting-checkpoint-sync",id:"quickstart/samples/setting-checkpoint-sync",title:"Setting Checkpoint Sync",description:"Overview",source:"@site/docs/quickstart/samples/setting-check-sync.mdx",sourceDirName:"quickstart/samples",slug:"/quickstart/samples/setting-checkpoint-sync",permalink:"/docs/quickstart/samples/setting-checkpoint-sync",draft:!1,editUrl:"https://github.com/NethermindEth/sedge/tree/main/docs/docs/quickstart/samples/setting-check-sync.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{id:"setting-checkpoint-sync",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Using custom MEV Relays",permalink:"/docs/quickstart/samples/using-relays"},next:{title:"Exposing APIs",permalink:"/docs/quickstart/samples/exposing-apis"}},a={},l=[{value:"Overview",id:"overview",level:2},{value:"Setting Checkpoint Sync",id:"setting-checkpoint-sync-1",level:2}],p={toc:l};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"setting-checkpoint-sync"},"Setting Checkpoint Sync"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,'Checkpoint sync, also known as "synchronization with checkpoints" or "checkpoint-based syncing," is a method of\nsynchronizing the blockchain by using predefined checkpoints in the blockchain. This approach is designed to\nspeed up the synchronization process and reduce the amount of data that needs to be downloaded, verified, and stored by\nnodes.'),(0,r.kt)("p",null,"In a traditional full sync, a node downloads and verifies every block and its associated transactions from the genesis\nblock (the first block in the blockchain) to the most recent block. This can be a slow and resource-intensive process,\nespecially as the blockchain grows in size over time."),(0,r.kt)("p",null,"In a checkpoint sync, nodes use predetermined checkpoints in the blockchain history. These checkpoints are block headers\nthat have been agreed upon by the Ethereum community as trustworthy and have been hardcoded into the client software.\nWhen a node performs a checkpoint sync, it downloads and verifies the data starting from the most recent checkpoint,\nrather than the genesis block. This significantly reduces the amount of data the node has to download and process,\nmaking synchronization faster and more efficient."),(0,r.kt)("p",null,"It's important to note that checkpoint syncs rely on trust in the checkpoint data, which could be a potential point of\ncentralization. However, the checkpoints are generally chosen from well-known and verified block headers, reducing the\nrisk of a malicious checkpoint being introduced."),(0,r.kt)("p",null,"Checkpoint sync is one of several synchronization methods that Ethereum clients can use, including full sync, fast sync,\nand snap sync. Each method offers a trade-off between speed, security, and resource usage."),(0,r.kt)("h2",{id:"setting-checkpoint-sync-1"},"Setting Checkpoint Sync"),(0,r.kt)("p",null,"Each network has set a default checkpoint sync url on Sedge. You can set the checkpoint sync url to a custom url using\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"--checkpoint-sync-url")," flag. For example, to set the checkpoint sync url to ",(0,r.kt)("inlineCode",{parentName:"p"},"https://example.com/checkpoint.json"),", run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sedge generate full-node --checkpoint-sync-url https://example.com/checkpoint.json\n")))}h.isMDXComponent=!0}}]);