"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8751],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=l(t),m=i,g=p["".concat(c,".").concat(m)]||p[m]||u[m]||r;return t?o.createElement(g,s(s({ref:n},d),{},{components:t})):o.createElement(g,s({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=p;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var l=2;l<r;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8580:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var o=t(7462),i=(t(7294),t(3905));const r={sidebar_position:10,id:"run"},s="Run",a={unversionedId:"commands/run",id:"commands/run",title:"Run",description:"Running sedge run will run all the services in the docker-compose.yml file under",source:"@site/docs/commands/run.mdx",sourceDirName:"commands",slug:"/commands/run",permalink:"/docs/commands/run",draft:!1,editUrl:"https://github.com/NethermindEth/sedge/tree/main/docs/docs/commands/run.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,id:"run"},sidebar:"tutorialSidebar",previous:{title:"Networks",permalink:"/docs/commands/networks"},next:{title:"Slashing Export",permalink:"/docs/commands/slashing-export"}},c={},l=[{value:"Help",id:"help",level:2},{value:"Execution Example",id:"execution-example",level:2},{value:"Running a set of services",id:"running-a-set-of-services",level:3}],d={toc:l};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"run"},"Run"),(0,i.kt)("p",null,"Running ",(0,i.kt)("inlineCode",{parentName:"p"},"sedge run")," will run all the services in the docker-compose.yml file under\nthe generation folder. To run the services this sequence of actions are made:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Build the necessary images (",(0,i.kt)("inlineCode",{parentName:"li"},"docker compose build"),")"),(0,i.kt)("li",{parentName:"ul"},"Pull the necessary images (",(0,i.kt)("inlineCode",{parentName:"li"},"docker compose pull"),")"),(0,i.kt)("li",{parentName:"ul"},"Create containers (",(0,i.kt)("inlineCode",{parentName:"li"},"docker compose create"),")"),(0,i.kt)("li",{parentName:"ul"},"Start containers (",(0,i.kt)("inlineCode",{parentName:"li"},"docker compose up"),")")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Skip ",(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"docker compose pull")," action"),(0,i.kt)("p",{parentName:"admonition"},"To skip the ",(0,i.kt)("inlineCode",{parentName:"p"},"docker compose pull")," command, the ",(0,i.kt)("inlineCode",{parentName:"p"},"--skip-pull")," flag could be used. This is useful\nwhen the images are already pulled or the user wants to use a local custom image.")),(0,i.kt)("h2",{id:"help"},"Help"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'$ sedge run -h\nRun all the generated services\n\nUsage:\n  sedge run [flags]\n\nFlags:\n  -h, --help               help for run\n  -p, --path string        generation path for sedge data (default "/path/to/sedge-data")\n      --services strings   List of services to run. If this flag is not provided, all services will run.\n      --skip-pull          Avoid pulling images before running containers. If the images are not available locally, this flag could cause an error.\n\nGlobal Flags:\n      --log-level string   Set Log Level, e.g panic, fatal, error, warn, warning, info, debug, trace (default "info")\n')),(0,i.kt)("h2",{id:"execution-example"},"Execution Example"),(0,i.kt)("admonition",{title:"Docker dependency",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," command will first check if Docker is installed, if it is not installed\nthen Sedge tries to install it.")),(0,i.kt)("p",null,"Once the generated data is ready, services inside the docker-compose.yml file could\nbe run using the ",(0,i.kt)("inlineCode",{parentName:"p"},"sedge run")," command."),(0,i.kt)("admonition",{title:"Generate files first",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," command assumes that the generated files are ready to run.")),(0,i.kt)("p",null,"First, open a Terminal with access to the sedge binary to get started. Then run\nthe following command to start all services in the default generation path\n",(0,i.kt)("inlineCode",{parentName:"p"},"./docker-compose-scripts"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ sedge run\nUsing config file: /root/.sedge.yaml\n2022-12-29 19:55:55 -- [INFO] [Logger Init] Logging configuration: {Level:debug}\n2022-12-29 19:55:55 -- [INFO] You are running the latest version of sedge. Version:  v1.5.0\n2022-12-29 20:40:24 -- [INFO] Checking dependencies: docker\n2022-12-29 20:40:24 -- [INFO] All dependencies are installed on host machine\n2022-12-29 19:55:55 -- [INFO] Setting up containers\n# highlight-next-line\n2022-12-29 19:55:55 -- [INFO] Running command: docker compose -f docker-compose-scripts/docker-compose.yml build\n2022-12-29 19:55:55 -- [DEBU] Running command with sudo.\n# highlight-next-line\n2022-12-29 19:55:55 -- [INFO] Running command: docker compose -f docker-compose-scripts/docker-compose.yml pull\n2022-12-29 19:55:55 -- [DEBU] Running command with sudo.\n[+] Running 5/5\n \u283f validator-import Pulled  0.3s\n \u283f validator Pulled         0.2s\n \u283f execution Pulled         0.3s\n \u283f consensus Pulled         0.2s\n \u283f validator-blocker Pulled 0.2s\n# highlight-next-line\n2022-12-29 19:55:56 -- [INFO] Running command: docker compose -f docker-compose-scripts/docker-compose.yml create\n2022-12-29 19:55:56 -- [DEBU] Running command with sudo.\n[+] Running 7/7\n \u283f Network sedge_network                                 Created  0.1s\n \u283f Network docker-compose-scripts_default                Created  0.1s\n \u283f Container execution-client                            Created  0.1s\n \u283f Container docker-compose-scripts-validator-blocker-1  Created  0.0s\n \u283f Container consensus-client                            Created  0.0s\n \u283f Container validator-import-client                     Created  0.0s\n \u283f Container validator-client                            Created  0.0s\n# highlight-next-line\n2022-12-29 19:55:56 -- [INFO] Running command: docker compose -f docker-compose-scripts/docker-compose.yml up -d\n2022-12-29 19:55:56 -- [DEBU] Running command with sudo.\n[+] Running 2/4\n \u283f Container validator-import-client                     Exited   1.2s\n \u283f Container consensus-client                            Waiting  14.4s\n \u283f Container execution-client                            Started  0.9s\n \u283f Container docker-compose-scripts-validator-blocker-1  Waiting\n")),(0,i.kt)("p",null,"In the logs above, the commands logs are highlighted to better understand the sequence\nof actions performed."),(0,i.kt)("h3",{id:"running-a-set-of-services"},"Running a set of services"),(0,i.kt)("p",null,"If it is no necessary to run all the services, then a set of services could be specified\nusing the ",(0,i.kt)("inlineCode",{parentName:"p"},"--services")," flag. A good example will be running the execution and consensus\nclient initially without the validator to sync the nodes and after the synchronization\nstart the validator."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ sedge run --services execution,consensus\nUsing config file: /root/.sedge.yaml\n2022-12-29 21:03:29 -- [INFO] [Logger Init] Logging configuration: {Level:debug}\n2022-12-29 21:03:29 -- [INFO] You are running the latest version of sedge. Version:  v1.5.0\n2022-12-29 21:03:29 -- [INFO] Checking dependencies: docker\n2022-12-29 21:03:29 -- [INFO] All dependencies are installed on host machine\n2022-12-29 21:03:29 -- [INFO] Setting up containers\n# highlight-next-line\n2022-12-29 21:03:29 -- [INFO] Running command: docker compose -f docker-compose-scripts/docker-compose.yml build execution consensus\n2022-12-29 21:03:29 -- [DEBU] Running command with sudo.\n# highlight-next-line\n2022-12-29 21:03:29 -- [INFO] Running command: docker compose -f docker-compose-scripts/docker-compose.yml pull execution consensus\n2022-12-29 21:03:29 -- [DEBU] Running command with sudo.\n[+] Running 2/2\n \u283f execution Pulled 0.2s\n \u283f consensus Pulled 0.4s\n# highlight-next-line\n2022-12-29 21:03:30 -- [INFO] Running command: docker compose -f docker-compose-scripts/docker-compose.yml create execution consensus\n2022-12-29 21:03:30 -- [DEBU] Running command with sudo.\n[+] Running 4/2\n \u283f Network docker-compose-scripts_default  Created  0.1s\n \u283f Network sedge_network                   Created  0.1s\n \u283f Container consensus-client              Created  0.0s\n \u283f Container execution-client              Created  0.1s\n# highlight-next-line\n2022-12-29 21:03:30 -- [INFO] Running command: docker compose -f docker-compose-scripts/docker-compose.yml up -d execution consensus\n2022-12-29 21:03:30 -- [DEBU] Running command with sudo.\n[+] Running 2/2\n \u283f Container consensus-client  Started  0.6s\n \u283f Container execution-client  Started  0.6s\n")),(0,i.kt)("p",null,"Now, if you go to the folder with the generated docker compose and run\n",(0,i.kt)("inlineCode",{parentName:"p"},"docker compose ps")," you can check the status of the execution and consensus services:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-logs"},'NAME                COMMAND                  SERVICE             STATUS               PORTS\nconsensus-client    "/app/cmd/beacon-cha\u2026"   consensus           running (starting)   0.0.0.0:5054->5054/tcp, :::5054->5054/tcp, 4000-4001/tcp, 0.0.0.0:9000->9000/tcp, :::9000->9000/tcp, 0.0.0.0:9000->9000/udp, :::9000->9000/udp\nexecution-client    "./Nethermind.Runner\u2026"   execution           running              8545/tcp, 0.0.0.0:8008->8008/tcp, :::8008->8008/tcp, 0.0.0.0:30303->30303/tcp, :::30303->30303/tcp, 8551/tcp, 0.0.0.0:30303->30303/udp, :::30303->30303/udp\n')),(0,i.kt)("p",null,"Notice in this case consensus service is starting, that means is still syncing.\nNow you can start the validator client like follow:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ sedge run --services validator\nUsing config file: /root/.sedge.yaml\n2022-12-29 21:24:12 -- [INFO] [Logger Init] Logging configuration: {Level:debug}\n2022-12-29 21:24:12 -- [INFO] You are running the latest version of sedge. Version:  v1.5.0\n2022-12-29 21:24:12 -- [INFO] Checking dependencies: docker\n2022-12-29 21:24:12 -- [INFO] All dependencies are installed on host machine\n2022-12-29 21:24:12 -- [INFO] Setting up containers\n# highlight-next-line\n2022-12-29 21:24:12 -- [INFO] Running command: docker compose -f docker-compose-scripts/docker-compose.yml build validator\n2022-12-29 21:24:12 -- [DEBU] Running command with sudo.\n# highlight-next-line\n2022-12-29 21:24:12 -- [INFO] Running command: docker compose -f docker-compose-scripts/docker-compose.yml pull validator\n2022-12-29 21:24:12 -- [DEBU] Running command with sudo.\n[+] Running 1/1\n \u283f validator Pulled 0.2s\n# highlight-next-line\n2022-12-29 21:24:12 -- [INFO] Running command: docker compose -f docker-compose-scripts/docker-compose.yml create validator\n2022-12-29 21:24:12 -- [DEBU] Running command with sudo.\n[+] Running 4/3\n \u283f Container docker-compose-scripts-validator-blocker-1  Created  0.1s\n \u283f Container validator-import-client                     Created  0.1s\n \u283f Container consensus-client                            Running  0.0s\n \u283f Container validator-client                            Created  0.0s\n# highlight-next-line\n2022-12-29 21:24:13 -- [INFO] Running command: docker compose -f docker-compose-scripts/docker-compose.yml up -d validator\n2022-12-29 21:24:13 -- [DEBU] Running command with sudo.\n[+] Running 1/3\n \u283f Container consensus-client                            Waiting  6.5s\n \u283f Container validator-import-client                     Exited   1.1s\n \u283f Container docker-compose-scripts-validator-blocker-1  Waiting  6.5s\n")),(0,i.kt)("p",null,"After this, the validator service will wait until consensus syncs to start."))}u.isMDXComponent=!0}}]);