"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6209],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=o,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(h,l(l({ref:t},p),{},{components:n})):r.createElement(h,l({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2779:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:2,id:"goerli"},l="Goerli",i={unversionedId:"networks/goerli",id:"networks/goerli",title:"Goerli",description:"Goerli is an Ethereum test network that allows for blockchain development testing before deployment on Mainnet, the",source:"@site/docs/networks/goerli.mdx",sourceDirName:"networks",slug:"/networks/goerli",permalink:"/docs/networks/goerli",draft:!1,editUrl:"https://github.com/NethermindEth/sedge/tree/main/docs/docs/networks/goerli.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"goerli"},sidebar:"tutorialSidebar",previous:{title:"Mainnet",permalink:"/docs/networks/mainnet"},next:{title:"Sepolia",permalink:"/docs/networks/sepolia"}},s={},u=[{value:"Supported Execution Clients",id:"supported-execution-clients",level:2},{value:"Supported Consensus Clients",id:"supported-consensus-clients",level:2},{value:"Supported Validator Clients",id:"supported-validator-clients",level:2},{value:"MEV-Boost",id:"mev-boost",level:2},{value:"Generating a Full Node",id:"generating-a-full-node",level:2},{value:"Generating a Full Node with a Validator",id:"generating-a-full-node-with-a-validator",level:2},{value:"Create keystore for validator",id:"create-keystore-for-validator",level:2},{value:"Running your setup",id:"running-your-setup",level:2}],p={toc:u};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"goerli"},"Goerli"),(0,o.kt)("p",null,"Goerli is an Ethereum test network that allows for blockchain development testing before deployment on Mainnet, the\nmain Ethereum network. The test network was established in March 2019 with Proof-of-Authority. It used to use the Clique consensus\nmechanism and was originally proposed by Chainsafe and Afri Schoedon. Goerli has successfully transitioned to\nProof-of-Stake following the network\u2019s total block difficulty having crossed 10,079,000 on August 10th, 2022."),(0,o.kt)("h2",{id:"supported-execution-clients"},"Supported Execution Clients"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.nethermind.io/"},"Nethermind")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://geth.ethereum.org/docs/"},"Geth")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/ledgerwatch/erigon"},"Erigon")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://besu.hyperledger.org/en/stable/"},"Besu"))),(0,o.kt)("h2",{id:"supported-consensus-clients"},"Supported Consensus Clients"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://lighthouse-book.sigmaprime.io/"},"Lighthouse")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://chainsafe.github.io/lodestar/"},"Lodestar")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.prylabs.network/docs/getting-started/"},"Prysm")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.teku.consensys.net/en/latest/"},"Teku"))),(0,o.kt)("h2",{id:"supported-validator-clients"},"Supported Validator Clients"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://lighthouse-book.sigmaprime.io/"},"Lighthouse")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://chainsafe.github.io/lodestar/"},"Lodestar")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.prylabs.network/docs/getting-started/"},"Prysm")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.teku.consensys.net/en/latest/"},"Teku"))),(0,o.kt)("h2",{id:"mev-boost"},"MEV-Boost"),(0,o.kt)("p",null,"We support ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/flashbots/mev-boost"},"mev-boost")," on goerli by default, in case you want to remove it,\nrun ",(0,o.kt)("inlineCode",{parentName:"p"},"sedge generate full-node")," using the ",(0,o.kt)("inlineCode",{parentName:"p"},"--no-mev-boost")," flag, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sedge generate full-node --network goerli --no-mev-boost=true\n")),(0,o.kt)("h2",{id:"generating-a-full-node"},"Generating a Full Node"),(0,o.kt)("p",null,"To generate a setup of a full node (without a validator node) with random clients, you only need to add the ",(0,o.kt)("inlineCode",{parentName:"p"},"--no-validator")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"sedge generate full-node"),". For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sedge generate full-node --no-validator --network=goerli\n")),(0,o.kt)("h2",{id:"generating-a-full-node-with-a-validator"},"Generating a Full Node with a Validator"),(0,o.kt)("p",null,"To generate a setup of a validator with random clients, you need to omit the ",(0,o.kt)("inlineCode",{parentName:"p"},"--no-validator")," flag. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sedge generate full-node --network=goerli\n")),(0,o.kt)("h2",{id:"create-keystore-for-validator"},"Create keystore for validator"),(0,o.kt)("p",null,"To create a keystore for a validator, you need to run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sedge keys --network goerli\n")),(0,o.kt)("h2",{id:"running-your-setup"},"Running your setup"),(0,o.kt)("p",null,"Once you have generated your setup, you can run it with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sedge run\n")))}d.isMDXComponent=!0}}]);