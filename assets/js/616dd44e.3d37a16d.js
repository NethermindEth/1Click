"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1073],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>k});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(r),k=a,h=c["".concat(s,".").concat(k)]||c[k]||d[k]||o;return r?n.createElement(h,l(l({ref:t},p),{},{components:r})):n.createElement(h,l({ref:t},p))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},2221:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:4,id:"holesky"},l="Holesky",i={unversionedId:"networks/holesky",id:"networks/holesky",title:"Holesky",description:"Holesky is Ethereum's public testnet that serves as a technical experimentation platform for Ethereum's infrastructure, staking designs, and protocol-level developments. This testing environment brings its own set of validators, a dedicated block explorer, and an ecosystem of faucets.",source:"@site/docs/networks/holesky.mdx",sourceDirName:"networks",slug:"/networks/holesky",permalink:"/docs/networks/holesky",draft:!1,editUrl:"https://github.com/NethermindEth/sedge/tree/main/docs/docs/networks/holesky.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,id:"holesky"},sidebar:"tutorialSidebar",previous:{title:"Sepolia",permalink:"/docs/networks/sepolia"},next:{title:"Gnosis",permalink:"/docs/networks/gnosis"}},s={},u=[{value:"Supported Execution Clients",id:"supported-execution-clients",level:2},{value:"Supported Consensus Clients",id:"supported-consensus-clients",level:2},{value:"Supported Validator Clients",id:"supported-validator-clients",level:2},{value:"Generating a Full Node",id:"generating-a-full-node",level:2},{value:"Generating a Full Node with a Validator",id:"generating-a-full-node-with-a-validator",level:2},{value:"Create keystore for validator",id:"create-keystore-for-validator",level:2},{value:"Running your setup",id:"running-your-setup",level:2}],p={toc:u};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"holesky"},"Holesky"),(0,a.kt)("p",null,"Holesky is Ethereum's public testnet that serves as a technical experimentation platform for Ethereum's infrastructure, staking designs, and protocol-level developments. This testing environment brings its own set of validators, a dedicated block explorer, and an ecosystem of faucets."),(0,a.kt)("h2",{id:"supported-execution-clients"},"Supported Execution Clients"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.nethermind.io/"},"Nethermind")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://geth.ethereum.org/docs/"},"Geth")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/ledgerwatch/erigon"},"Erigon")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://besu.hyperledger.org/en/stable/"},"Besu"))),(0,a.kt)("h2",{id:"supported-consensus-clients"},"Supported Consensus Clients"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://lighthouse-book.sigmaprime.io/"},"Lighthouse")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://chainsafe.github.io/lodestar/"},"Lodestar")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.prylabs.network/docs/getting-started/"},"Prysm")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.teku.consensys.net/en/latest/"},"Teku"))),(0,a.kt)("h2",{id:"supported-validator-clients"},"Supported Validator Clients"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://lighthouse-book.sigmaprime.io/"},"Lighthouse")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://chainsafe.github.io/lodestar/"},"Lodestar")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.prylabs.network/docs/getting-started/"},"Prysm")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.teku.consensys.net/en/latest/"},"Teku"))),(0,a.kt)("h2",{id:"generating-a-full-node"},"Generating a Full Node"),(0,a.kt)("p",null,"To generate a setup of a full node (without a validator node) with random clients, you only need to add the ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-validator")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"sedge generate full-node"),". For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sedge generate full-node --no-validator --network=holesky\n")),(0,a.kt)("h2",{id:"generating-a-full-node-with-a-validator"},"Generating a Full Node with a Validator"),(0,a.kt)("p",null,"To generate a setup of a validator with random clients, you need to omit the ",(0,a.kt)("inlineCode",{parentName:"p"},"--no-validator")," flag. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sedge generate full-node --network=holesky\n")),(0,a.kt)("h2",{id:"create-keystore-for-validator"},"Create keystore for validator"),(0,a.kt)("p",null,"To create a keystore for a validator, you need to run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sedge keys --network holesky\n")),(0,a.kt)("h2",{id:"running-your-setup"},"Running your setup"),(0,a.kt)("p",null,"Once you have generated your setup, you can run it with the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"sedge run\n")))}d.isMDXComponent=!0}}]);