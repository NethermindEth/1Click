"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2743],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),c=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return o.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return n?o.createElement(h,s(s({ref:t},l),{},{components:n})):o.createElement(h,s({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a.mdxType="string"==typeof e?e:r,s[1]=a;for(var c=2;c<i;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3169:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const i={id:"exposing-apis",sidebar_position:9},s="Exposing APIs",a={unversionedId:"quickstart/samples/exposing-apis",id:"quickstart/samples/exposing-apis",title:"Exposing APIs",description:"Ethereum APIs",source:"@site/docs/quickstart/samples/exposing-api.mdx",sourceDirName:"quickstart/samples",slug:"/quickstart/samples/exposing-apis",permalink:"/docs/quickstart/samples/exposing-apis",draft:!1,editUrl:"https://github.com/NethermindEth/sedge/tree/main/docs/docs/quickstart/samples/exposing-api.mdx",tags:[],version:"current",sidebarPosition:9,frontMatter:{id:"exposing-apis",sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Setting Checkpoint Sync",permalink:"/docs/quickstart/samples/setting-checkpoint-sync"},next:{title:"Running a MEV-boost node",permalink:"/docs/quickstart/samples/running-mev-boost-node"}},p={},c=[{value:"Ethereum APIs",id:"ethereum-apis",level:2},{value:"Exposing APIs using Sedge",id:"exposing-apis-using-sedge",level:2}],l={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"exposing-apis"},"Exposing APIs"),(0,r.kt)("h2",{id:"ethereum-apis"},"Ethereum APIs"),(0,r.kt)("p",null,"There are a few main options for connecting to Ethereum nodes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"RPC (Remote Procedure Call) - The simplest option, just sends JSON RPC requests to a node. Used by web3.js and many other libs."),(0,r.kt)("li",{parentName:"ul"},"IPC (Inter-Process Communication) - Local socket connection, higher performance than RPC. Also used by web3.js and others."),(0,r.kt)("li",{parentName:"ul"},"WS (WebSockets) - For receiving real-time updates (new blocks, logs, etc). Also supported in web3.js."),(0,r.kt)("li",{parentName:"ul"},"ETH (Devp2p) - Low level protocol to connect to nodes. Quite complex, not commonly used outside of core Ethereum implementations.")),(0,r.kt)("p",null,"So in code, it would look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// RPC\nconst Web3 = require('web3')\nconst web3 = new Web3('http://localhost:8545')\n\n// IPC\nconst web3 = new Web3('/tmp/geth.ipc')\n\n// WS\nconst web3WS = new Web3('ws://localhost:8546')\n\n// ETH / Devp2p\n// Much more complex, not shown here\n")),(0,r.kt)("p",null,"You can then call methods on web3 to interact with the Ethereum blockchain, deploy contracts, send transactions, etc.\nSo to connect to both a consensus node (for mining/block info) and an execution node (for deploying contracts), you'd\nsimply instantiate multiple Web3 instances pointing to different nodes."),(0,r.kt)("h2",{id:"exposing-apis-using-sedge"},"Exposing APIs using Sedge"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"By default, Sedge doesn't expose any important port that can be used to interact with the node.\nThis is to prevent accidental exposure of the node to the internet.")),(0,r.kt)("p",null,"In order to connect to a node, you need to expose the ports of the nodes you are running that expose those APIs."),(0,r.kt)("p",null,"To expose the needed ports for APIs interactions in the generated docker-compose file, you will need to set the\n",(0,r.kt)("inlineCode",{parentName:"p"},"--map-all")," flag while generating those files. This will expose all the ports of the nodes that expose APIs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sedge generate full-node --map-all\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Exposing the ports of your node to the internet is a security risk."),(0,r.kt)("p",{parentName:"admonition"},"Only expose the ports you need, and make sure to secure them properly.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you run a docker image that use the same network of the setup, by default ",(0,r.kt)("inlineCode",{parentName:"p"},"sedge-network"),", you can connect that container to the nodes you already have running. This way you can connect to the nodes without exposing the ports to the internet.")))}u.isMDXComponent=!0}}]);