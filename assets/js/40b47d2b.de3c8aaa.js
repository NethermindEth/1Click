"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4722],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),d=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return o.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=d(n),u=a,m=h["".concat(l,".").concat(u)]||h[u]||c[u]||r;return n?o.createElement(m,i(i({ref:t},p),{},{components:n})):o.createElement(m,i({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var d=2;d<r;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2794:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:7,id:"keys"},i="Keys",s={unversionedId:"commands/keys",id:"commands/keys",title:"Keys",description:"Running sedge keys will generate the keystore folder.",source:"@site/docs/commands/keys.mdx",sourceDirName:"commands",slug:"/commands/keys",permalink:"/docs/commands/keys",draft:!1,editUrl:"https://github.com/NethermindEth/sedge/tree/main/docs/docs/commands/keys.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,id:"keys"},sidebar:"tutorialSidebar",previous:{title:"Import key",permalink:"/docs/commands/import-key"},next:{title:"Logs",permalink:"/docs/commands/logs"}},l={},d=[{value:"Help",id:"help",level:2},{value:"Execution Example",id:"execution-example",level:2}],p={toc:d};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"keys"},"Keys"),(0,a.kt)("p",null,"Running ",(0,a.kt)("inlineCode",{parentName:"p"},"sedge keys")," will generate the keystore folder."),(0,a.kt)("admonition",{title:"Disclaimer",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Users acknowledge that generating the keystore for any network is an unaudited feature of Sedge. Nethermind provides this feature on an \u2018as is\u2019 basis and makes no warranties regarding its proper functioning. The use of this feature is at the user\u2019s own risk - Nethermind excludes all liability for any malfunction or loss of money that may occur as the result of an unexpected behavior during the keystore generation.")),(0,a.kt)("h2",{id:"help"},"Help"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sedge keys -h\nGenerate keystore folder using the eth2.0-deposit-cli tool\n\nUsage:\n  sedge keys [flags]\n\nFlags:\n      --eth-withdrawal-address string   If this field is set and valid, the given Eth address will be used to create the withdrawal credentials. Otherwise, it will generate withdrawal credentials with the mnemonic-derived withdrawal public key in EIP-2334 format.\n      --existing int                    Number of validators generated with the provided mnemonic. Will be ignored if "--mnemonic-path" its not set. This number will be used as the initial index for the generated keystores. (default -1)\n  -h, --help                            help for keys\n  -i, --install                         Install dependencies if not installed without asking\n      --lido                            Enable Lido CSM compatible keys. Similar to using --eth-withdrawal-address with the Lido Withdrawal Vault address.\n      --mnemonic-path string            Path to file with a existing mnemonic to use.\n  -n, --network string                  Target network. e.g. mainnet,sepolia, holesky, gnosis, chiado etc. (default "mainnet")\n      --num-validators int              Number of validators to generate. This number will be used in addition to the existing flag as the end index for the generated keystores. (default -1)\n      --passphrase-path string          Path to file with a keystores passphrase to use.\n  -p, --path string                     Absolute path to keystore folder. e.g. /home/user/keystore (default "/path/to/sedge-data")\n      --random-passphrase               Usa a randomly generated passphrase to encrypt keystores.\n\nGlobal Flags:\n      --log-level string   Set Log Level, e.g panic, fatal, error, warn, warning, info, debug, trace (default "info")\n')),(0,a.kt)("h2",{id:"execution-example"},"Execution Example"),(0,a.kt)("p",null,"Sedge uses the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ethereum/staking-deposit-cli"},"staking-deposit-cli")," tool docker image for mainnet to generate the validator keystore, and uses our own experimental code for the rest of the supported networks."),(0,a.kt)("admonition",{title:"Disclaimer",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Users acknowledge that staking-deposit-cli is an external tool, which means that Nethermind exercises no control over its functioning and does not accept any liability for any issues that may arise from using the tool.")),(0,a.kt)("admonition",{title:"Disclaimer",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Users acknowledge that generating the keystore for any network other than the mainnet is an experimental and unaudited feature of Sedge. Nethermind provides this feature on an \u2018as is\u2019 basis and makes no warranties regarding its proper functioning. The use of this feature is at the user\u2019s own risk - Nethermind excludes all liability for any malfunction or loss of money that may occur as the result of an unexpected behavior during the keystore generation.")),(0,a.kt)("p",null,"To get started, first open another Terminal on the same working directory we used before (where the binary is located). Then run the following command to quickly generate the keystore:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"./sedge keys\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"keys")," command will first check if Docker is installed (because use docker to run the staking-deposit-cli docker image). As we already installed Docker in the previous steps, Sedge will continue the process."),(0,a.kt)("p",null,"The next step involves a prompt for an Eth1 address to be used to create the withdrawal credentials. If you don't provide one, then the tool will generate withdrawal credentials with the mnemonic-derived withdrawal public key."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-logs"},"2022-00-00 00:00:00 -- [INFO] [Logger Init] Log level: info\n2022-00-00 00:00:00 -- [INFO] All dependencies are installed on host machine\n# highlight-next-line\n\u2714 Please enter a Eth1 address to be used to create the withdrawal credentials. You can leave it blank and press enter:\n")),(0,a.kt)("p",null,"The keystore must be secured with a password with a minimum length of 8. Sedge will ask you to provide this password so it can be used by the staking-deposit-cli to secure the generated keystore and then create a ",(0,a.kt)("inlineCode",{parentName:"p"},"keystore_password.txt")," for the validator node. The password input will be hidden so you don't need to worry about your password getting registered in the Terminal logs or history."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u2714 Please enter the password you will use for the validator keystore: ********\u2588\nPlease enter the password you will use for the validator keystore: ********\n\u2714 Please re-enter the password. Press Ctrl+C to retry: ********\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"A ",(0,a.kt)("strong",{parentName:"p"},"password prompt")," may show up again because Sedge uses docker commands to run the staking-deposit-cli docker image, and these commands need to be executed with ",(0,a.kt)("inlineCode",{parentName:"p"},"sudo")," by default. The required password is your ",(0,a.kt)("strong",{parentName:"p"},"machine password"),", not the keystore password.")),(0,a.kt)("p",null,"From here, the rest of the flow belongs to the staking-deposit-cli tool:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"2022-00-00 00:00:00 -- [INFO] Generating keystore folder\n2022-00-00 00:00:00 -- [INFO] Running command:\ndocker run -it --rm -v /home/sedge/docker-compose-scripts/keystore/validator_keys:/app/validator_keys nethermindeth/staking-deposit-cli new-mnemonic --chain mainnet --keystore_password ********\nPlease choose your language ['1. \u0627\u0644\u0639\u0631\u0628\u064a\u0629', '2. \u03b5\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac', '3. English', '4. Fran\xe7ais', '5. Bahasa melayu', '6. Italiano', '7. \u65e5\u672c\u8a9e', '8. \ud55c\uad6d\uc5b4', '9. Portugu\xeas do Brasil', '10. rom\xe2n', '11. \u7b80\u4f53\u4e2d\u6587']:  [English]:\nRepeat your keystore password for confirmation:\n")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Be sure to type correctly the keystore password previously provided to Sedge. If you don't insert the same password, then staking-deposit-cli will ask you to create a new password. If this happens, you have two options:"),(0,a.kt)("ol",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ol"},"Exit the program and try again."),(0,a.kt)("li",{parentName:"ol"},"Finish the execution flow, generating the keystore successfully in the process. Then you need to update the ",(0,a.kt)("inlineCode",{parentName:"li"},"keystore_password.txt")," file inside the ",(0,a.kt)("inlineCode",{parentName:"li"},"keystore")," folder with the password you provided to the staking-deposit-cli tool."))),(0,a.kt)("p",null,"The staking-deposit-cli tool lets you create a keystore using an existing mnemonic or by creating a new one. By default, Sedge's ",(0,a.kt)("inlineCode",{parentName:"p"},"keys")," command goes with creating a new mnemonic."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Please choose your mnemonic language ['1. \u7b80\u4f53\u4e2d\u6587', '2. \u7e41\u9ad4\u4e2d\u6587', '3. \u010de\u0161tina', '4. English', '5. Italiano', '6. \ud55c\uad6d\uc5b4', '7. Portugu\xeas', '8. Espa\xf1ol']:  [english]:\nPlease choose how many new validators you wish to run:\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"One validator node can handle hundreds of validators (validator keys). We recommend to run at most 500 validators within a single validator node. We will go with 1 validator this time.")),(0,a.kt)("p",null,"After you choose how many new validators you wish to run, a newly generated mnemonic will be displayed. You must copy it using safe methods such as pen and paper. Then you will be asked to insert the mnemonic for validation. This is the final step, after which the keystore will be generated:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"                  #####     #####\n                ##     #####     ##\n    ###         ##   #######     #########################\n    ##  ##      #####               ##                   ##\n    ##     #####                 ##                       ##\n    ##     ##                     ##                      ###\n   ########                        ##                     ####\n   ##        ##   ###         #####                       #####\n   #                          ##                         # #####\n   #                            #                        #  #####\n   ##                             ##                    ##\n   ##                              ##                   ##\n   ##             ###              ##                   ##\n   ###############                 ##                   ##\n   ###               ##                                 ##\n      #############################                    ##\n                     ##                             ###\n                     #######     #################     ###\n                     ##   ## ##        ##   ##    ###\n                     ##############          #############\n\nCreating your keys.\nCreating your keys:           [####################################]  1/1\nCreating your keystores:      [####################################]  1/1\nCreating your depositdata:  [####################################]  1/1\nVerifying your keystores:     [####################################]  1/1\nVerifying your deposits:      [####################################]  1/1\n\nSuccess!\nYour keys can be found at: /app/validator_keys\n\n\nPress any key.\n")),(0,a.kt)("p",null,"The above logs mark the end of the staking-deposit-cli execution and Sedge retakes control of the flow:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-logs"},"2022-00-00 00:00:00 -- [INFO] deposit-cli tool exited\n# highlight-next-line\n2022-00-00 00:00:00 -- [INFO] If everything went well, your keys can be found at: /home/sedge/docker-compose-scripts/keystore/validator_keys\n2022-00-00 00:00:00 -- [INFO] keystore_password.txt on keystore folder created with provided password\n2022-00-00 00:00:00 -- [WARN] In case you used custom paths for the 'cli' or the 'keys' commands, please review if the keystore path in the generated .env file points to the generated keystore folder (the .env key should be KEYSTORE_DIR). If not, change the path in the .env file to the correct one.\n")),(0,a.kt)("p",null,"As we stick to default configuration values all the time, we can ignore the final log."),(0,a.kt)("p",null,"Your keystore folder should look similar to this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker-compose-scripts\n    \u2514\u2500\u2500 keystore\n        \u251c\u2500\u2500 keystore_password.txt\n        \u2514\u2500\u2500 validator_keys\n            \u251c\u2500\u2500 deposit_data-1659326409.json\n            \u2514\u2500\u2500 keystore-m_12381_3600_0_0_0-1659326408.json\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"A guide for using our own experimental code for keystore generation is coming soon!")))}c.isMDXComponent=!0}}]);