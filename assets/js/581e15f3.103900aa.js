"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6538],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>m});var a=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function n(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?n(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):n(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,a,r=function(e,t){if(null==e)return{};var o,a,r={},n=Object.keys(e);for(a=0;a<n.length;a++)o=n[a],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)o=n[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var o=e.components,r=e.mdxType,n=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(o),m=r,k=u["".concat(s,".").concat(m)]||u[m]||d[m]||n;return o?a.createElement(k,i(i({ref:t},p),{},{components:o})):a.createElement(k,i({ref:t},p))}));function m(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=o.length,i=new Array(n);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<n;c++)i[c]=o[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,o)}u.displayName="MDXCreateElement"},5152:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>n,metadata:()=>l,toc:()=>c});var a=o(7462),r=(o(7294),o(3905));const n={sidebar_position:7,id:"setup-validator"},i="Restarting the Validator",l={unversionedId:"quickstart/setup-validator",id:"quickstart/setup-validator",title:"Restarting the Validator",description:"By default, when you set up a full node, the Validator container will wait for the following conditions to be met:",source:"@site/docs/quickstart/restart-validator.mdx",sourceDirName:"quickstart",slug:"/quickstart/setup-validator",permalink:"/docs/quickstart/setup-validator",draft:!1,editUrl:"https://github.com/NethermindEth/sedge/tree/main/docs/docs/quickstart/restart-validator.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,id:"setup-validator"},sidebar:"tutorialSidebar",previous:{title:"Control Your Setup Stack",permalink:"/docs/quickstart/by-yourself"},next:{title:"Key Management",permalink:"/docs/quickstart/keys-management"}},s={},c=[{value:"Restarting a Validator",id:"restarting-a-validator",level:2},{value:"Solution (Only for Unix-based systems)",id:"solution-only-for-unix-based-systems",level:2},{value:"Systemd service",id:"systemd-service",level:3},{value:"Crontab job",id:"crontab-job",level:3}],p={toc:c};function d(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"restarting-the-validator"},"Restarting the Validator"),(0,r.kt)("p",null,"By default, when you set up a full node, the Validator container will wait for the following conditions to be met:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The Consensus client is up and synced."),(0,r.kt)("li",{parentName:"ol"},"Wait for 1 Epoch at least (using the ",(0,r.kt)("inlineCode",{parentName:"li"},"validator-blocker")," service of the ",(0,r.kt)("inlineCode",{parentName:"li"},"docker-compose.yml")," script).")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You can set the number of epochs to wait using the flag ",(0,r.kt)("inlineCode",{parentName:"p"},"--wait-epoch <number>")," on the generate command, the default value is 1.")),(0,r.kt)("p",null,"After that, the Validator container will launch."),(0,r.kt)("h2",{id:"restarting-a-validator"},"Restarting a Validator"),(0,r.kt)("p",null,"If for any reason your setup is restarted, the ",(0,r.kt)("inlineCode",{parentName:"p"},"validator")," will not start automatically. You will need to run it manually,\nbecause otherwise, it will not wait for the above conditions to be met, therefore, the restart might cause some slashing issues."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You need to restart the validator manually; if you instead configure the docker compose service to restart automatically, this can incur severe penalties for your node.")),(0,r.kt)("p",null,"If the docker daemon restarts (due to a machine reboot, for example), the docker compose services with a restart policy will\nrestart, but the ",(0,r.kt)("inlineCode",{parentName:"p"},"depends_on")," policy won\u2019t retake effect. The ",(0,r.kt)("inlineCode",{parentName:"p"},"depends_on")," policy only takes effect after a docker compose\nup (for the reboot case). This means the Validator can\u2019t set a restart policy until we run ",(0,r.kt)("inlineCode",{parentName:"p"},"down")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"up")," after a reboot\nfor it to now incur in any slashing."),(0,r.kt)("h2",{id:"solution-only-for-unix-based-systems"},"Solution (Only for Unix-based systems)"),(0,r.kt)("p",null,"To solve this problem, we found two workarounds:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a ",(0,r.kt)("inlineCode",{parentName:"li"},"systemd service")),(0,r.kt)("li",{parentName:"ul"},"Create a ",(0,r.kt)("inlineCode",{parentName:"li"},"crontab job"))),(0,r.kt)("p",null,"Both of those solutions will run after a reboot and will run the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker compose up validator")," command."),(0,r.kt)("h3",{id:"systemd-service"},"Systemd service"),(0,r.kt)("p",null,"You can use the following steps to automatically run ",(0,r.kt)("inlineCode",{parentName:"p"},"docker compose up validator")," when your machine restarts:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a systemd service file with the following content:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[Unit]\nDescription=Validator Restart Service\nRequires=docker.service\nAfter=docker.service\n\n[Service]\nRestart=always\nWorkingDirectory=/path/to/docker-compose/file\nExecStart=/usr/local/bin/docker compose up -d validator\n\n[Install]\nWantedBy=multi-user.target\n\n")),(0,r.kt)("p",null,"Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"/path/to/docker-compose/file")," with the actual path to your ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," file. You may also need to adjust the ",(0,r.kt)("inlineCode",{parentName:"p"},"ExecStart")," path if your ",(0,r.kt)("inlineCode",{parentName:"p"},"docker")," binary is located elsewhere."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Save the file as ",(0,r.kt)("inlineCode",{parentName:"li"},"/etc/systemd/system/validator-restart.service"),"."),(0,r.kt)("li",{parentName:"ol"},"Reload the systemd daemon:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo systemctl daemon-reload\n\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Enable the service to start automatically at boot:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo systemctl enable validator-restart.service\n\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Start the service:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo systemctl start validator-restart.service\n\n")),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"After completing these steps, ",(0,r.kt)("inlineCode",{parentName:"li"},"docker compose up validator")," will automatically run when your machine restarts. You can check the status of the service with:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo systemctl status validator-restart.service\n\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you need to stop the service, you can use the following command:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"sudo systemctl stop validator-restart.service\n"))),(0,r.kt)("h3",{id:"crontab-job"},"Crontab job"),(0,r.kt)("p",null,"To create a cron job that automatically runs ",(0,r.kt)("inlineCode",{parentName:"p"},"docker compose up validator")," on system reboot, you should first create a shell script\nthat runs the necessary commands, and then set up a cron job to execute the script at system startup."),(0,r.kt)("p",null,"Here's how to do it:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a shell script:\nOpen a terminal and navigate to the directory where your ",(0,r.kt)("inlineCode",{parentName:"li"},"docker-compose.yml")," file is located. Then, create a new shell script file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"touch start-docker-compose.sh\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Open the file with a text editor:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nano start-docker-compose.sh\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Add the following content to the script:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"#!/bin/bash\n# Change to the directory containing the docker-compose.yml file\ncd /path/to/your/docker-compose/directory\n\n# Load environment variables, if any\nsource .env\n\n# Start the Docker Compose service\ndocker compose up -d validator\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Replace /path/to/your/docker-compose/directory with the actual path of the directory containing your ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),"\nfile. Save and exit the text editor.")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Make the script executable:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x start-docker-compose.sh\n")),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"Set up a cron job:")),(0,r.kt)("p",null,"Run the following command to edit the system-wide crontab file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo crontab -e\n")),(0,r.kt)("p",null,"Add the following line at the end of the file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"@reboot /path/to/your/script/directory/start-docker-compose.sh\n")),(0,r.kt)("p",null,"Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"/path/to/your/script/directory")," with the actual path of the directory containing your ",(0,r.kt)("inlineCode",{parentName:"p"},"start-docker-compose.sh")," script. Save and exit the text editor."),(0,r.kt)("p",null,"Now, the cron job will automatically run ",(0,r.kt)("inlineCode",{parentName:"p"},"docker compose up -d validator")," on system reboot."))}d.isMDXComponent=!0}}]);