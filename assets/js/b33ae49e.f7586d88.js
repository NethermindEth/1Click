"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4695],{6575:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var o=t(4848),s=t(8453);const i={id:"exposing-apis",sidebar_position:9},r="Exposing APIs",c={id:"quickstart/samples/exposing-apis",title:"Exposing APIs",description:"Ethereum APIs",source:"@site/docs/quickstart/samples/exposing-api.mdx",sourceDirName:"quickstart/samples",slug:"/quickstart/samples/exposing-apis",permalink:"/docs/quickstart/samples/exposing-apis",draft:!1,unlisted:!1,editUrl:"https://github.com/NethermindEth/sedge/tree/main/docs/docs/quickstart/samples/exposing-api.mdx",tags:[],version:"current",sidebarPosition:9,frontMatter:{id:"exposing-apis",sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Setting Checkpoint Sync",permalink:"/docs/quickstart/samples/setting-checkpoint-sync"},next:{title:"Running a MEV-boost node",permalink:"/docs/quickstart/samples/running-mev-boost-node"}},a={},d=[{value:"Ethereum APIs",id:"ethereum-apis",level:2},{value:"Exposing APIs using Sedge",id:"exposing-apis-using-sedge",level:2}];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"exposing-apis",children:"Exposing APIs"})}),"\n",(0,o.jsx)(n.h2,{id:"ethereum-apis",children:"Ethereum APIs"}),"\n",(0,o.jsx)(n.p,{children:"There are a few main options for connecting to Ethereum nodes:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"RPC (Remote Procedure Call) - The simplest option, just sends JSON RPC requests to a node. Used by web3.js and many other libs."}),"\n",(0,o.jsx)(n.li,{children:"IPC (Inter-Process Communication) - Local socket connection, higher performance than RPC. Also used by web3.js and others."}),"\n",(0,o.jsx)(n.li,{children:"WS (WebSockets) - For receiving real-time updates (new blocks, logs, etc). Also supported in web3.js."}),"\n",(0,o.jsx)(n.li,{children:"ETH (Devp2p) - Low level protocol to connect to nodes. Quite complex, not commonly used outside of core Ethereum implementations."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"So in code, it would look something like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"// RPC\nconst Web3 = require('web3')\nconst web3 = new Web3('http://localhost:8545')\n\n// IPC\nconst web3 = new Web3('/tmp/geth.ipc')\n\n// WS\nconst web3WS = new Web3('ws://localhost:8546')\n\n// ETH / Devp2p\n// Much more complex, not shown here\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can then call methods on web3 to interact with the Ethereum blockchain, deploy contracts, send transactions, etc.\nSo to connect to both a consensus node (for mining/block info) and an execution node (for deploying contracts), you'd\nsimply instantiate multiple Web3 instances pointing to different nodes."}),"\n",(0,o.jsx)(n.h2,{id:"exposing-apis-using-sedge",children:"Exposing APIs using Sedge"}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsx)(n.p,{children:"By default, Sedge doesn't expose any important port that can be used to interact with the node.\nThis is to prevent accidental exposure of the node to the internet."})}),"\n",(0,o.jsx)(n.p,{children:"In order to connect to a node, you need to expose the ports of the nodes you are running that expose those APIs."}),"\n",(0,o.jsxs)(n.p,{children:["To expose the needed ports for APIs interactions in the generated docker-compose file, you will need to set the\n",(0,o.jsx)(n.code,{children:"--map-all"})," flag while generating those files. This will expose all the ports of the nodes that expose APIs."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"sedge generate full-node --map-all\n"})}),"\n",(0,o.jsxs)(n.admonition,{type:"caution",children:[(0,o.jsx)(n.p,{children:"Exposing the ports of your node to the internet is a security risk."}),(0,o.jsx)(n.p,{children:"Only expose the ports you need, and make sure to secure them properly."})]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["If you run a docker image that use the same network of the setup, by default ",(0,o.jsx)(n.code,{children:"sedge-network"}),", you can connect that container to the nodes you already have running. This way you can connect to the nodes without exposing the ports to the internet."]})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var o=t(6540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);