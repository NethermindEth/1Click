"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1209],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=u(n),c=o,h=m["".concat(l,".").concat(c)]||m[c]||p[c]||a;return n?i.createElement(h,r(r({ref:t},d),{},{components:n})):i.createElement(h,r({ref:t},d))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var u=2;u<a;u++)r[u]=n[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>r});var i=n(7294),o=n(6010);const a="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return i.createElement("div",{role:"tabpanel",className:(0,o.Z)(a,r),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>c});var i=n(7462),o=n(7294),a=n(6010),r=n(2389),s=n(7392),l=n(7094),u=n(2466);const d="tabList__CuJ",p="tabItem_LNqP";function m(e){var t;const{lazy:n,block:r,defaultValue:m,values:c,groupId:h,className:g}=e,f=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=c??f.map((e=>{let{props:{value:t,label:n,attributes:i}}=e;return{value:t,label:n,attributes:i}})),y=(0,s.l)(k,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const w=null===m?m:m??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==w&&!k.some((e=>e.value===w)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${w}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:v}=(0,l.U)(),[O,N]=(0,o.useState)(w),S=[],{blockElementScrollPositionUntilNextRender:T}=(0,u.o5)();if(null!=h){const e=b[h];null!=e&&e!==O&&k.some((t=>t.value===e))&&N(e)}const E=e=>{const t=e.currentTarget,n=S.indexOf(t),i=k[n].value;i!==O&&(T(t),N(i),null!=h&&v(h,String(i)))},x=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=S.indexOf(e.currentTarget)+1;n=S[t]??S[0];break}case"ArrowLeft":{const t=S.indexOf(e.currentTarget)-1;n=S[t]??S[S.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,a.Z)("tabs-container",d)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":r},g)},k.map((e=>{let{value:t,label:n,attributes:r}=e;return o.createElement("li",(0,i.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:e=>S.push(e),onKeyDown:x,onFocus:E,onClick:E},r,{className:(0,a.Z)("tabs__item",p,null==r?void 0:r.className,{"tabs__item--active":O===t})}),n??t)}))),n?(0,o.cloneElement)(f.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==O})))))}function c(e){const t=(0,r.Z)();return o.createElement(m,(0,i.Z)({key:String(t)},e))}},150:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var i=n(7462),o=(n(7294),n(3905));n(5488),n(5162);const a={sidebar_position:10,id:"running-optimism-node"},r="Running an Optimism Node with Sedge",s={unversionedId:"quickstart/running-optimism-node",id:"quickstart/running-optimism-node",title:"Running an Optimism Node with Sedge",description:"What is Optimism?",source:"@site/docs/quickstart/optimism.mdx",sourceDirName:"quickstart",slug:"/quickstart/running-optimism-node",permalink:"/docs/quickstart/running-optimism-node",draft:!1,editUrl:"https://github.com/NethermindEth/sedge/tree/main/docs/docs/quickstart/optimism.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,id:"running-optimism-node"},sidebar:"tutorialSidebar",previous:{title:"Staking with Lido using Sedge",permalink:"/docs/quickstart/staking-with-lido"},next:{title:"Commands",permalink:"/docs/commands"}},l={},u=[{value:"What is Optimism?",id:"what-is-optimism",level:2},{value:"Workflow breakdown",id:"workflow-breakdown",level:2},{value:"Using Sedge for Optimism",id:"using-sedge-for-optimism",level:2},{value:"Generating Node Configuration",id:"generating-node-configuration",level:3},{value:"Running the Node",id:"running-the-node",level:3},{value:"Monitoring and Maintenance",id:"monitoring-and-maintenance",level:3},{value:"Base Support",id:"base-support",level:2}],d={toc:u};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"running-an-optimism-node-with-sedge"},"Running an Optimism Node with Sedge"),(0,o.kt)("h2",{id:"what-is-optimism"},"What is Optimism?"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.optimism.io/"},"Optimism")," is a Layer 2 scaling solution for Ethereum that uses optimistic rollups to achieve faster and cheaper transactions while maintaining Ethereum's security. Running an Optimism node allows you to interact with the Optimism network directly, validate transactions, and contribute to the network's decentralization."),(0,o.kt)("p",null,"Sedge supports setting up and running Optimism nodes, making it easier for users to participate in the Optimism ecosystem. This guide will walk you through the process of setting up an Optimism node using Sedge."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Running an Optimism node requires significant computational resources and a stable internet connection. Make sure your system meets the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.optimism.io/builders/node-operators/tutorials/mainnet#hardware-requirements"},"minimum requirements")," before proceeding.")),(0,o.kt)("h2",{id:"workflow-breakdown"},"Workflow breakdown"),(0,o.kt)("p",null,"Setting up an Optimism node with Sedge involves several steps:"),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Generate Node Configuration"),": Use Sedge to generate the necessary configuration files for your Optimism node."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Run the Node"),": Start your Optimism node using the generated configuration."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Monitor and Maintain"),": Keep your node running smoothly and up to date.")),(0,o.kt)("p",null,"Let's dive into each step in detail."),(0,o.kt)("h2",{id:"using-sedge-for-optimism"},"Using Sedge for Optimism"),(0,o.kt)("h3",{id:"generating-node-configuration"},"Generating Node Configuration"),(0,o.kt)("p",null,"To generate the configuration for your Optimism node, use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sedge generate op-full-node --network mainnet\n")),(0,o.kt)("p",null,"This command will create a new directory with all the necessary configuration files for running an Optimism node on the mainnet. If you want to run a node on the testnet (Sepolia), use ",(0,o.kt)("inlineCode",{parentName:"p"},"--network sepolia")," instead."),(0,o.kt)("p",null,"At this time, we are using Nethermind as the execution Optimism node, in the future we will add support for ",(0,o.kt)("inlineCode",{parentName:"p"},"op-geth"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"When you use ",(0,o.kt)("inlineCode",{parentName:"p"},"sedge generate op-full-node"),", Sedge will generate a ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," script and a ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file with the necessary configuration for your Optimism node."),(0,o.kt)("p",{parentName:"admonition"},"That config will include the execution client, the consensus client, and the execution and consensus Optimism client.")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Setting ",(0,o.kt)("inlineCode",{parentName:"p"},"--execution-api-url")," flag, will only generate execution and consensus Optimism nodes, and the stack will point to that execution node."),(0,o.kt)("p",{parentName:"admonition"},"This is useful if you already have an endpoint for the execution node. It will save synchronization time.")),(0,o.kt)("h3",{id:"running-the-node"},"Running the Node"),(0,o.kt)("p",null,"Once the configuration is generated, you can start your Optimism node using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sedge run\n")),(0,o.kt)("p",null,"This command will start all the necessary components of your Optimism node, including the execution client and the optimism client."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The first time you run your node, it will need to sync with the network, which can take several hours or even days depending on your hardware and network connection.")),(0,o.kt)("h3",{id:"monitoring-and-maintenance"},"Monitoring and Maintenance"),(0,o.kt)("p",null,"After your Optimism node is up and running, you should monitor its performance and ensure it stays in sync with the network. Regularly check for updates to the Optimism client and other components to keep your node secure and up to date."),(0,o.kt)("p",null,"By following these steps, you can set up and run an Optimism node using Sedge, contributing to the growth and decentralization of the Optimism network."),(0,o.kt)("h2",{id:"base-support"},"Base Support"),(0,o.kt)("p",null,"Sedge also support Base, an Ethereum Layer 2 (L2) chain that offers a safe, low-cost, developer-friendly way to build on-chain. Base is an L2 built on OP Stack in collaboration with Optimism."),(0,o.kt)("p",null,"The only difference between setting up an Optimism node and a Base node is the ",(0,o.kt)("inlineCode",{parentName:"p"},"--base")," flag. To generate a Base node configuration, use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sedge generate op-full-node --base\n")))}p.isMDXComponent=!0}}]);