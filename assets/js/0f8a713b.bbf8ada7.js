"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1791],{9347:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var o=n(4848),s=n(8453);const a={sidebar_position:5,id:"generate"},i="Generate",r={id:"commands/generate",title:"Generate",description:"Running sedge generate with the different sub commands will generate the docker-compose file that will be used to run the nodes.",source:"@site/docs/commands/generate.mdx",sourceDirName:"commands",slug:"/commands/generate",permalink:"/docs/commands/generate",draft:!1,unlisted:!1,editUrl:"https://github.com/NethermindEth/sedge/tree/main/docs/docs/commands/generate.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,id:"generate"},sidebar:"tutorialSidebar",previous:{title:"Down",permalink:"/docs/commands/down"},next:{title:"Import key",permalink:"/docs/commands/import-key"}},l={},d=[{value:"Help",id:"help",level:2},{value:"Lido Flow",id:"lido-flow",level:3},{value:"Sub Commands",id:"sub-commands",level:3},{value:"Full-Node",id:"full-node",level:4},{value:"Op-Full-Node",id:"op-full-node",level:4},{value:"Consensus",id:"consensus",level:4},{value:"Execution",id:"execution",level:4},{value:"Validator",id:"validator",level:4},{value:"MevBoost",id:"mevboost",level:4}];function c(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"generate",children:"Generate"})}),"\n",(0,o.jsxs)(t.p,{children:["Running ",(0,o.jsx)(t.code,{children:"sedge generate"})," with the different sub commands will generate the docker-compose file that will be used to run the nodes."]}),"\n",(0,o.jsx)(t.h2,{id:"help",children:"Help"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'$ sedge generate -h\nGenerate new setups according to selected options and flags.\n\nIt will create a \'docker-compose.yml\' and a \'.env\', which you will need later to run the docker-compose script. You can use \'sedge run\' to run the script and start the setup.\n\nYou can generate:\n- Full Node (execution + consensus + validator)\n- Full Node without Validator (execution + consensus)\n- Optimism Full Node\n- Execution Node\n- Consensus Node\n- Validator Node\n- Mev-Boost Instance\n- Lido CSM node\n\nUsage:\n  sedge generate [command]\n\nAvailable Commands:\n  consensus    Generate a consensus node config\n  execution    Generate a execution node config\n  full-node    Generate a full node config, with or without a validator\n  mev-boost    Generate a mev-boost node config\n  op-full-node Generate a full node config for Optimism or Base\n  validator    Generate a validator node config\n\nFlags:\n      --container-tag string   Container tag to use. If defined, sedge will add to each container and the network, a suffix with the tag. e.g. sedge-validator-client -> sedge-validator-client-<tag>.\n  -h, --help                   help for generate\n      --lido                   generate Lido CSM node\n      --logging string         Docker logging driver used by all the services. Set \'none\' to use the default docker logging driver. Possible values: [none json] (default "json")\n  -n, --network string         Target network. e.g. mainnet, sepolia, holesky, gnosis, chiado, etc. (default "mainnet")\n  -p, --path string            generation path for sedge data. Default is sedge-data (default "/path/to/sedge-data")\n\nGlobal Flags:\n      --log-level string   Set Log Level, e.g panic, fatal, error, warn, warning, info, debug, trace (default "info")\n\nUse "sedge generate [command] --help" for more information about a command.\n'})}),"\n",(0,o.jsx)(t.h3,{id:"lido-flow",children:"Lido Flow"}),"\n",(0,o.jsxs)(t.p,{children:["With the ",(0,o.jsx)(t.code,{children:"--lido"})," flag, you can generate a Lido CSM node. This will generate a full node, a execution, a consensus, a validator or a mev-boost node with the Lido CSM configuration."]}),"\n",(0,o.jsx)(t.p,{children:"It will include in the configuration of the selected node:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Lido Withdrawal Credentials"}),"\n",(0,o.jsx)(t.li,{children:"Lido Fee Recipient Address"}),"\n",(0,o.jsx)(t.li,{children:"Designated MEV-Boost Relay URL"}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"sub-commands",children:"Sub Commands"}),"\n",(0,o.jsx)(t.h4,{id:"full-node",children:"Full-Node"}),"\n",(0,o.jsx)(t.admonition,{type:"caution",children:(0,o.jsxs)(t.p,{children:["You should use ",(0,o.jsx)(t.code,{children:"--fee-recipient"})," flag to set the fee recipient address if your setup includes a ",(0,o.jsx)(t.strong,{children:"validator"}),". If you don't set it, your priority fee earnings will be deposited into a burn address."]})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'$ sedge generate full-node -h\nGenerate a docker-compose and an environment file with a full node configuration.\n\nIt will not generate a validator configuration if the --no-validator flag is set to true.\n\nOn mainnet and sepolia mev-boost will be activated by default unless you run it with --no-mev-boost flag.\n\nIf you don\'t provide a execution, consensus or validator client, it will be chosen randomly. If one of the consensus or validator is provided, but the other one is omitted, then the same pair of clients will be used for both consensus and validator.\n\nAdditionally, you can use this syntax \'<CLIENT>:<DOCKER_IMAGE>\' to override the docker image used for the client, for example \'sedge generate full-node --execution nethermind:docker.image\'. If you want to use the default docker image, just use the client name\n\nUsage:\n  sedge generate full-node [flags]\n\nFlags:\n  -c, --consensus string                  Consensus engine client, e.g. teku, lodestar, prysm, lighthouse, Nimbus. Additionally, you can use this syntax \'<CLIENT>:<DOCKER_IMAGE>\' to override the docker image used for the client. If you want to use the default docker image, just use the client name\n  -e, --execution string                  Execution engine client, e.g. geth, nethermind, besu, erigon. Additionally, you can use this syntax \'<CLIENT>:<DOCKER_IMAGE>\' to override the docker image used for the client. If you want to use the default docker image, just use the client name\n  -v, --validator string                  Validator engine client, e.g. teku, lodestar, prysm, lighthouse, Nimbus. Additionally, you can use this syntax \'<CLIENT>:<DOCKER_IMAGE>\' to override the docker image used for the client. If you want to use the default docker image, just use the client name\n      --latest                            Use the latest version of clients. This sets the "latest" tag on the client\'s docker images. Latest version might not work.\n      --checkpoint-sync-url string        Initial state endpoint (trusted synced consensus endpoint) for the consensus client to sync from a finalized checkpoint. Provide faster sync process for the consensus client and protect it from long-range attacks affored by Weak Subjetivity. Each network has a default checkpoint sync url.\n      --fee-recipient string              Suggested fee recipient. Is a 20-byte Ethereum address which the execution layer might choose to set as the coinbase and the recipient of other fees or rewards. There is no guarantee that an execution node will use the suggested fee recipient to collect fees, it may use any address it chooses. It is assumed that an honest execution node will use the suggested fee recipient, but users should note this trust assumption.\n                                          Note: When setting up a Lido node, fee recipient address will be automatically set by the system.\n      --no-mev-boost                      Not use mev-boost if supported\n  -m, --mev-boost-image string            Custom docker image to use for Mev Boost. Example: \'sedge generate full-node --mev-boost-image flashbots/mev-boost:latest-portable\'\n      --relay-urls strings                List of comma separated relay URLs used to connect to mev relay. Example: \'sedge generate full-node --relay-urls=https://0xac6e77dfe25ecd6110b8e780608cce0dab71fdd5ebea22a16c0205200f2f8e2e3ad3b71d3499c54ad14d6c21b41a37ae@boost-relay.flashbots.net,https://0xa1559ace749633b997cb3fdacffb890aeebdb0f5a3b6aaa7eeeaf1a38af0a8fe88b9e4b1f61f236d2e64d95733327a62@relay.ultrasound.money\'\n                                          Note: When setting up a Lido node, the provided relay URLs will be automatically set by the system.\n      --no-validator                      Exclude the validator from the full node setup. Designed for execution and consensus nodes setup without a validator node. Exclude also the validator from other flags. If set, mev-boost will not be used.\n      --jwt-secret-path string            Path to the JWT secret file\n      --graffiti string                   Graffiti to be used by the validator\n      --map-all                           Map all clients ports to host. Use with care. Useful to allow remote access to the clients\n      --fallback-execution-urls strings   Fallback/backup execution endpoints for the consensus client. Not supported by Teku. Example: \'sedge generate full-node -r --fallback-execution=https://mainnet.infura.io/v3/YOUR-PROJECT-ID,https://eth-mainnet.alchemyapi.io/v2/YOUR-PROJECT-ID\'\n      --el-extra-flag stringArray         Additional flag to configure the execution client service in the generated docker-compose script. Example: \'sedge generate full-node --el-extra-flag "<flag1>=value1" --el-extra-flag "<flag2>=\\"value2\\""\'\n      --cl-extra-flag stringArray         Additional flag to configure the consensus client service in the generated docker-compose script. Example: \'sedge generate full-node --cl-extra-flag "<flag1>=value1" --cl-extra-flag "<flag2>=\\"value2\\""\'\n      --vl-extra-flag stringArray         Additional flag to configure the validator client service in the generated docker-compose script. Example: \'sedge generate full-node --vl-extra-flag "<flag1>=value1" --vl-extra-flag "<flag2>=\\"value2\\""\'\n      --custom-chainSpec string           File path or url to use as custom network chainSpec for execution client.\n      --custom-config string              File path or url to use as custom network config file for consensus client.\n      --custom-genesis string             File path or url to use as custom network genesis for consensus client.\n      --custom-deploy-block string        Custom network deploy block to use for consensus client.\n      --wait-epoch int                    Number of epochs to wait before starting and restarting of the validator client. (default 1)\n      --execution-bootnodes strings       List of comma separated enodes to use as custom network peers for execution client.\n      --consensus-bootnodes strings       List of comma separated enrs to use as custom network peers for consensus client.\n  -h, --help                              help for full-node\n\nGlobal Flags:\n      --container-tag string   Container tag to use. If defined, sedge will add to each container and the network, a suffix with the tag. e.g. sedge-validator-client -> sedge-validator-client-<tag>.\n      --lido                   generate Lido CSM node\n      --log-level string       Set Log Level, e.g panic, fatal, error, warn, warning, info, debug, trace (default "info")\n      --logging string         Docker logging driver used by all the services. Set \'none\' to use the default docker logging driver. Possible values: [none json] (default "json")\n  -n, --network string         Target network. e.g. mainnet,sepolia, holesky, gnosis, chiado, etc. (default "mainnet")\n  -p, --path string            generation path for sedge data. Default is sedge-data (default "/path/to/sedge/sedge-data")\n'})}),"\n",(0,o.jsx)(t.h4,{id:"op-full-node",children:"Op-Full-Node"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'$ sedge generate op-full-node -h\nGenerate a docker-compose and an environment file with a full node configuration for Optimism or Base networks.\n\nThis command sets up an Optimism or Base full node, which includes an execution client, a consensus client, a Optimism consensus client, and an Optimism node.\n\nIf you don\'t provide images for your clients, they will be chosen randomly. You can specify custom images for the Optimism and other nodes.\n\nUse the --base flag to generate a configuration for a Base node (which is built on Optimism).\n\nThe command allows you to use external execution and consensus APIs instead of running your own nodes, by providing the respective URLs.\n\nAdditionally, you can use the syntax \'<CLIENT>:<DOCKER_IMAGE>\' to override the docker image used for the client, for example \'sedge generate op-full-node --execution nethermind:custom.image\'. If you want to use the default docker image, just use the client name.\n\nThis command does not generate a validator configuration, as Optimism and Base use different validation mechanisms compared to standard Ethereum networks.\n\nUsage:\n  sedge generate op-full-node [flags]\n\nFlags:\n  -c, --consensus string                  Consensus engine client, e.g. teku, lodestar, prysm, lighthouse, Nimbus. Additionally, you can use this syntax \'<CLIENT>:<DOCKER_IMAGE>\' to override the docker image used for the client. If you want to use the default docker image, just use the client name\n      --op-image string                   Optimism consensus client image.\n      --op-execution-image string         Image name set for nethermind client to be used with optimism.\n  -e, --execution string                  Execution engine client, e.g. geth, nethermind, besu, erigon. Additionally, you can use this syntax \'<CLIENT>:<DOCKER_IMAGE>\' to override the docker image used for the client. If you want to use the default docker image, just use the client name\n      --execution-api-url string          Set execution api url. If Set, will omit the creation of execution and beacon nodes, and only create optimism nodes.\n      --consensus-url string          Set consensus api url. If Set, will omit the creation of execution and beacon nodes, and only create optimism nodes.\n      --latest                            Use the latest version of clients. This sets the "latest" tag on the client\'s docker images. Latest version might not work.\n      --checkpoint-sync-url string        Initial state endpoint (trusted synced consensus endpoint) for the consensus client to sync from a finalized checkpoint. Provide faster sync process for the consensus client and protect it from long-range attacks affored by Weak Subjetivity. Each network has a default checkpoint sync url.\n      --fee-recipient string              Suggested fee recipient. Is a 20-byte Ethereum address which the execution layer might choose to set as the coinbase and the recipient of other fees or rewards. There is no guarantee that an execution node will use the suggested fee recipient to collect fees, it may use any address it chooses. It is assumed that an honest execution node will use the suggested fee recipient, but users should note this trust assumption\n      --jwt-secret-path string            Path to the JWT secret file\n      --map-all                           Map all clients ports to host. Use with care. Useful to allow remote access to the clients\n      --base                              If set, will generate the docker-compose file for Base L2 config.\n      --fallback-execution-urls strings   Fallback/backup execution endpoints for the consensus client. Not supported by Teku. Example: \'sedge generate full-node -r --fallback-execution=https://mainnet.infura.io/v3/YOUR-PROJECT-ID,https://eth-mainnet.alchemyapi.io/v2/YOUR-PROJECT-ID\'\n      --el-extra-flag stringArray         Additional flag to configure the execution client service in the generated docker-compose script. Example: \'sedge generate full-node --el-extra-flag "<flag1>=value1" --el-extra-flag "<flag2>=\\"value2\\""\'\n      --el-op-extra-flag stringArray      Additional flag to configure the execution client for optimism service in the generated docker-compose script. Example: \'sedge generate full-node --el-extra-flag "<flag1>=value1" --el-extra-flag "<flag2>=\\"value2\\""\'\n      --op-extra-flag stringArray         Additional flag to configure the optimism client service in the generated docker-compose script. Example: \'sedge generate full-node --el-extra-flag "<flag1>=value1" --el-extra-flag "<flag2>=\\"value2\\""\'\n      --cl-extra-flag stringArray         Additional flag to configure the consensus client service in the generated docker-compose script. Example: \'sedge generate full-node --cl-extra-flag "<flag1>=value1" --cl-extra-flag "<flag2>=\\"value2\\""\'\n      --execution-bootnodes strings       List of comma separated enodes to use as custom network peers for execution client.\n      --consensus-bootnodes strings       List of comma separated enrs to use as custom network peers for consensus client.\n  -h, --help                              help for op-full-node\n\nGlobal Flags:\n      --container-tag string   Container tag to use. If defined, sedge will add to each container and the network, a suffix with the tag. e.g. sedge-validator-client -> sedge-validator-client-<tag>.\n      --lido                   generate Lido CSM node\n      --log-level string       Set Log Level, e.g panic, fatal, error, warn, warning, info, debug, trace (default "info")\n      --logging string         Docker logging driver used by all the services. Set \'none\' to use the default docker logging driver. Possible values: [json none] (default "json")\n  -n, --network string         Target network. e.g. mainnet,sepolia, holesky, gnosis, chiado, etc. (default "mainnet")\n  -p, --path string            generation path for sedge data. Default is sedge-data (default "/path/to/sedge/sedge-data")\n'})}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"--base"})," flag will generate the base docker-compose file for Base."]})}),"\n",(0,o.jsx)(t.h4,{id:"consensus",children:"Consensus"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"$ sedge generate consensus -h\nGenerate a docker-compose and an environment file with a consensus node configuration\nValid args: name of execution clients according to network\n\nShould be one of: lighthouse, teku, prysm, lodestar. If you don't provide one, it will chosen randomly.\nAdditionally, you can use this syntax '<CLIENT>:<DOCKER_IMAGE>' to override the docker image used for the client, for example 'sedge generate consensus prysm:docker.image'. If you want to use the default docker image, just use the client name\n\nRequired flags:\n- '--execution-api-url'\n- '--execution-auth-url'\n\nUsage:\n  sedge generate consensus [flags] --execution-api-url <URL> --execution-auth-url <URL> [args]\n\nFlags:\n      --latest                            Use the latest version of clients. This sets the \"latest\" tag on the client's docker images. Latest version might not work.\n      --execution-api-url string          Execution API endpoint for the consensus client. Example: 'sedge generate consensus -r --execution-api-url=https://api.url.endpoint'\n      --execution-auth-url string         Execution AUTH endpoint for the consensus client. Example: 'sedge generate consensus -r --execution-auth-url=https://auth.url.endpoint'\n      --checkpoint-sync-url string        Initial state endpoint (trusted synced consensus endpoint) for the consensus client to sync from a finalized checkpoint. Provide faster sync process for the consensus client and protect it from long-range attacks affored by Weak Subjetivity. Each network has a default checkpoint sync url.\n      --fee-recipient string              Suggested fee recipient. Is a 20-byte Ethereum address which the execution layer might choose to set as the coinbase and the recipient of other fees or rewards. There is no guarantee that an execution node will use the suggested fee recipient to collect fees, it may use any address it chooses. It is assumed that an honest execution node will use the suggested fee recipient, but users should note this trust assumption.\n                                          Note: When setting up a Lido node, fee recipient address will be automatically set by the system.\n      --jwt-secret-path string            Path to the JWT secret file\n      --mev-boost-url string              If you are running a mev boost node, and you want to connect to it, you need to set mev-boost-url, if not set, node will not load any mev boost related config.\n      --map-all                           Map all clients ports to host. Use with care. Useful to allow remote access to the clients\n      --fallback-execution-urls strings   Fallback/backup execution endpoints for the consensus client. Not supported by Teku. Example: 'sedge generate consensus --fallback-execution=https://mainnet.infura.io/v3/YOUR-PROJECT-ID,https://eth-mainnet.alchemyapi.io/v2/YOUR-PROJECT-ID'\n      --cl-extra-flag stringArray         Additional flag to configure the consensus client service in the generated docker-compose script. Example: 'sedge generate consensus --cl-extra-flag \"<flag1>=value1\" --cl-extra-flag \"<flag2>=\\\"value2\\\"\"'\n      --custom-config string              File path or url to use as custom network config file for consensus client.\n      --custom-genesis string             File path or url to use as custom network genesis for consensus client.\n      --custom-deploy-block string        Custom network deploy block to use for consensus client.\n      --consensus-bootnodes strings       List of comma separated enrs to use as custom network peers for consensus client.\n  -h, --help                              help for consensus\n\nGlobal Flags:\n      --container-tag string   Container tag to use. If defined, sedge will add to each container and the network, a suffix with the tag. e.g. sedge-validator-client -> sedge-validator-client-<tag>.\n      --lido                   generate Lido CSM node\n      --log-level string       Set Log Level, e.g panic, fatal, error, warn, warning, info, debug, trace (default \"info\")\n      --logging string         Docker logging driver used by all the services. Set 'none' to use the default docker logging driver. Possible values: [none json] (default \"json\")\n  -n, --network string         Target network. e.g. mainnet,sepolia, holesky, gnosis, chiado, etc. (default \"mainnet\")\n  -p, --path string            generation path for sedge data. Default is sedge-data (default \"/path/to/sedge/sedge-data\")\n"})}),"\n",(0,o.jsx)(t.h4,{id:"execution",children:"Execution"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'$ sedge generate execution -h\nGenerate a docker-compose and an environment file with a execution node configuration.\nValid args: name of execution clients according to network\n\nShould be one of: nethermind, geth, besu, erigon. If you don\'t provide one, it will chosen randomly.\nAdditionally, you can use this syntax \'<CLIENT>:<DOCKER_IMAGE>\' to override the docker image used for the client, for example \'sedge generate execution nethermind:docker.image\'. If you want to use the default docker image, just use the client name\n\nUsage:\n  sedge generate execution [flags] [args]\n\nFlags:\n      --latest                        Use the latest version of clients. This sets the "latest" tag on the client\'s docker images. Latest version might not work.\n      --jwt-secret-path string        Path to the JWT secret file\n      --map-all                       Map all clients ports to host. Use with care. Useful to allow remote access to the clients\n      --custom-chainSpec string       File path or url to use as custom network chainSpec for execution client.\n      --execution-bootnodes strings   List of comma separated enodes to use as custom network peers for execution client.\n      --el-extra-flag stringArray     Additional flag to configure the execution client service in the generated docker-compose script. Example: \'sedge generate consensus--el-extra-flag "<flag1>=value1" --el-extra-flag "<flag2>=\\"value2\\""\'\n  -h, --help                          help for execution\n\nGlobal Flags:\n      --container-tag string   Container tag to use. If defined, sedge will add to each container and the network, a suffix with the tag. e.g. sedge-validator-client -> sedge-validator-client-<tag>.\n      --lido                   generate Lido CSM node\n      --log-level string       Set Log Level, e.g panic, fatal, error, warn, warning, info, debug, trace (default "info")\n      --logging string         Docker logging driver used by all the services. Set \'none\' to use the default docker logging driver. Possible values: [none json] (default "json")\n  -n, --network string         Target network. e.g. mainnet,sepolia, holesky, gnosis, chiado, etc. (default "mainnet")\n  -p, --path string            generation path for sedge data. Default is sedge-data (default "/path/to/sedge/sedge-data")\n'})}),"\n",(0,o.jsx)(t.h4,{id:"validator",children:"Validator"}),"\n",(0,o.jsx)(t.admonition,{type:"caution",children:(0,o.jsxs)(t.p,{children:["You should use ",(0,o.jsx)(t.code,{children:"--fee-recipient"})," flag to set the fee recipient address. If you don't set it, your priority fee earnings will be deposited into a burn address."]})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'$ sedge generate validator -h\nGenerate a docker-compose and an environment file with a validator node configuration\nValid args: name of execution clients according to network\n\nShould be one of: lighthouse, teku, prysm, lodestar. If you don\'t provide one, it will chosen randomly.\nAdditionally, you can use this syntax \'<CLIENT>:<DOCKER_IMAGE>\' to override the docker image used for the client, for example \'sedge generate validator prysm:docker.image\'. If you want to use the default docker image, just use the client name\n\nRequired flags:\n- `--consensus-url`\n\nUsage:\n  sedge generate validator [flags] --consensus-url <URL> [args]\n\nFlags:\n      --latest                       Use the latest version of clients. This sets the "latest" tag on the client\'s docker images. Latest version might not work.\n      --consensus-url string     Consensus endpoint for the validator client to connect to. Example: \'sedge generate validator --consensus-url http://localhost:4000\'\n      --fee-recipient string         Suggested fee recipient. Is a 20-byte Ethereum address which the execution layer might choose to set as the coinbase and the recipient of other fees or rewards. There is no guarantee that an execution node will use the suggested fee recipient to collect fees, it may use any address it chooses. It is assumed that an honest execution node will use the suggested fee recipient, but users should note this trust assumption.\n                                     Note: When setting up a Lido node, fee recipient address will be automatically set by the system.\n      --graffiti string              Graffiti to be used by the validator\n      --mev-boost                    Use mev-boost while turning on validator node\n      --custom-config string         File path or url to use as custom network config file for consensus client.\n      --custom-genesis string        File path or url to use as custom network genesis for consensus client.\n      --custom-deploy-block string   Custom network deploy block to use for consensus client.\n      --wait-epoch int               Number of epochs to wait before starting and restarting of the validator client. (default 1)\n      --vl-extra-flag stringArray    Additional flag to configure the validator client service in the generated docker-compose script. Example: \'sedge generate validator --vl-extra-flag "<flag1>=value1" --vl-extra-flag "<flag2>=\\"value2\\""\'\n  -h, --help                         help for validator\n\nGlobal Flags:\n      --container-tag string   Container tag to use. If defined, sedge will add to each container and the network, a suffix with the tag. e.g. sedge-validator-client -> sedge-validator-client-<tag>.\n      --lido                   generate Lido CSM node\n      --log-level string       Set Log Level, e.g panic, fatal, error, warn, warning, info, debug, trace (default "info")\n      --logging string         Docker logging driver used by all the services. Set \'none\' to use the default docker logging driver. Possible values: [none json] (default "json")\n  -n, --network string         Target network. e.g. mainnet,sepolia, holesky, gnosis, chiado, etc. (default "mainnet")\n  -p, --path string            generation path for sedge data. Default is sedge-data (default "/path/to/sedge/sedge-data")\n'})}),"\n",(0,o.jsx)(t.h4,{id:"mevboost",children:"MevBoost"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'$ sedge generate mev-boost -h\nGenerate a docker-compose and an environment file with a mev-boost node configuration\n\nUsage:\n  sedge generate mev-boost [flags]\n\nFlags:\n      --relay-urls strings       List of comma separated relay URLs used to connect to mev relay. Example: \'sedge generate full-node --relay-urls=https://0xac6e77dfe25ecd6110b8e780608cce0dab71fdd5ebea22a16c0205200f2f8e2e3ad3b71d3499c54ad14d6c21b41a37ae@boost-relay.flashbots.net,https://0xa1559ace749633b997cb3fdacffb890aeebdb0f5a3b6aaa7eeeaf1a38af0a8fe88b9e4b1f61f236d2e64d95733327a62@relay.ultrasound.money\'\n                                 Note: When setting up a Lido node, the provided relay URLs will be automatically set by the system.\n  -m, --mev-boost-image string   Custom docker image to use for Mev Boost. Example: \'sedge generate mev-boost --mev-boost-image flashbots/mev-boost:latest-portable\'\n  -n, --network string           Target network. e.g. mainnet, sepolia etc. (default "mainnet")\n  -h, --help                     help for mev-boost\n\nGlobal Flags:\n      --container-tag string   Container tag to use. If defined, sedge will add to each container and the network, a suffix with the tag. e.g. sedge-validator-client -> sedge-validator-client-<tag>.\n      --lido                   generate Lido CSM node\n      --log-level string       Set Log Level, e.g panic, fatal, error, warn, warning, info, debug, trace (default "info")\n      --logging string         Docker logging driver used by all the services. Set \'none\' to use the default docker logging driver. Possible values: [none json] (default "json")\n  -p, --path string            generation path for sedge data. Default is sedge-data (default "/path/to/sedge/sedge-data")\n'})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var o=n(6540);const s={},a=o.createContext(s);function i(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);