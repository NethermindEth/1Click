"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2931],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(a),m=i,u=c["".concat(l,".").concat(m)]||c[m]||h[m]||r;return a?n.createElement(u,o(o({ref:t},p),{},{components:a})):n.createElement(u,o({ref:t},p))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var d=2;d<r;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},2217:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var n=a(7462),i=(a(7294),a(3905));const r={id:"keys-management",sidebar_position:8},o="Key Management",s={unversionedId:"quickstart/keys-management",id:"quickstart/keys-management",title:"Key Management",description:"To become a validator on Ethereum PoS, an individual or entity needs to meet certain requirements, such as:",source:"@site/docs/quickstart/keys-management.mdx",sourceDirName:"quickstart",slug:"/quickstart/keys-management",permalink:"/docs/quickstart/keys-management",draft:!1,editUrl:"https://github.com/NethermindEth/sedge/tree/main/docs/docs/quickstart/keys-management.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{id:"keys-management",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Restarting the Validator",permalink:"/docs/quickstart/setup-validator"},next:{title:"Run a validator on Mainnet",permalink:"/docs/quickstart/samples/run-validator"}},l={},d=[{value:"sedge keys",id:"sedge-keys",level:2},{value:"sedge import-key",id:"sedge-import-key",level:2},{value:"Slashing protection",id:"slashing-protection",level:2},{value:"Slashing import",id:"slashing-import",level:3},{value:"Slashing export",id:"slashing-export",level:3}],p={toc:d};function h(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"key-management"},"Key Management"),(0,i.kt)("p",null,"To become a validator on Ethereum PoS, an individual or entity needs to meet certain requirements, such as:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Holding a minimum of 32 ETH, which will be staked as collateral."),(0,i.kt)("li",{parentName:"ol"},"Running or participating in a validator client software (e.g., Prysm, Lighthouse, Teku)."),(0,i.kt)("li",{parentName:"ol"},"Generating a validator key pair, which consists of a private key and a public key.")),(0,i.kt)("p",null,"The validator's private key is crucial because it allows the validator to sign messages, propose new blocks, and attest\nto the validity of other blocks. Importing the validator's private key into the client software is an essential step for\nparticipating in Ethereum 2.0's PoS consensus mechanism."),(0,i.kt)("p",null,"When importing the private key, it's important to ensure the security of the key, as losing it or having it compromised\nwould result in potential loss of staked funds and control over the validator. Validators should follow best practices\nfor securely managing and storing their private keys."),(0,i.kt)("h2",{id:"sedge-keys"},"sedge keys"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"sedge keys")," command is used to generate the validators keys, it will use a mnemonic that already exists or generate\na new random one. The same happens with the passphrase, if it is not provided, it will be generated randomly."),(0,i.kt)("p",null,"It can be used at any time, since that command does not require any generated file."),(0,i.kt)("p",null,"Once generated the keys, they can be imported using the ",(0,i.kt)("inlineCode",{parentName:"p"},"sedge import-key")," command."),(0,i.kt)("h2",{id:"sedge-import-key"},"sedge import-key"),(0,i.kt)("p",null,"Import keys refers to the process of adding a validator's private key to a client software. The private key is imported\ninto the client software's keystore, which is a directory that stores the private keys of all validators that are\ncurrently active on the network."),(0,i.kt)("p",null,"Import validator client keys, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"--from")," flag to specify the keys location,\nand make sure that follows the ",(0,i.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-2335"},"EIP-2335: BLS12-381 Keystore standard"),". This command\nassumes that the validator client container exists, stopped or not."),(0,i.kt)("p",null,"This command stops the validator client during the importing process due to the\nvalidator database being locked while it's running but leaves the validator client\nin the same state in which it was found. That means if the validator is running/stopped\nbefore the import, then the validator will be running/stopped after the command\nis executed, regardless of whether the export fails or not. To force a different\nbehavior use ",(0,i.kt)("inlineCode",{parentName:"p"},"--start-validator")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"--stop-validator")," flags."),(0,i.kt)("h2",{id:"slashing-protection"},"Slashing protection"),(0,i.kt)("p",null,"Slashing protection is a mechanism in the Ethereum blockchain that is designed to prevent validators in the network from\nbeing punished for unintentional mistakes that could potentially harm the network."),(0,i.kt)("p",null,"In the context of the Ethereum 2.0 network, validators are responsible for verifying transactions and creating new blocks.\nValidators are required to put up a certain amount of cryptocurrency (in this case, ether) as a deposit in order to\nparticipate in the network."),(0,i.kt)("p",null,"If a validator behaves maliciously or makes a mistake that harms the network, their deposit may be slashed, meaning that\na portion of their deposit is taken away as a penalty. This is intended to incentive validators to act in the best\ninterest of the network and to discourage malicious behavior."),(0,i.kt)("p",null,"However, in some cases, validators may be unfairly penalized if they experience technical issues, such as a network\noutage or a hardware failure. Slashing protection mechanisms are designed to minimize the risk of these kinds of\nunintentional mistakes resulting in a validator's deposit being slashed."),(0,i.kt)("p",null,"There are several mechanisms for slashing protection in Ethereum 2.0, including the use of redundancy and\nbackup systems, as well as penalties that are only applied in cases where there is clear evidence of malicious behavior.\nThese mechanisms are intended to encourage validators to participate in the network and to ensure that the network\nremains secure and reliable."),(0,i.kt)("h3",{id:"slashing-import"},"Slashing import"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"sedge slashing-import [flags] [validator]")," command is used to import slashing protection data from a JSON file into the validator client."),(0,i.kt)("p",null,"The JSON file must be in the format specified by the ",(0,i.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-3076"},"EIP-3076: Slashing Protection Interchange Format")," standard."),(0,i.kt)("p",null,"This command assumes that the validator client container exists, stopped or not and that its database\nis already initialized. The validator database is initialized if the validator is\nrunning or has already run but is stopped, and also after importing the validator keys."),(0,i.kt)("p",null,"This command stops the validator client during the importing process due to the\nvalidator database being locked while it's running but leaves the validator client\nin the same state in which it was found. That means if the validator is running/stopped\nbefore the import, then the validator will be running/stopped after the command\nis executed, regardless of whether the export fails or not. To force a different\nbehavior use ",(0,i.kt)("inlineCode",{parentName:"p"},"--start-validator")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"--stop-validator")," flags."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"[validator]")," is a required argument used to specify which validator client, from\nall supported by Sedge (lighthouse, lodestar, prysm or teku), is used to import the\nSlashing Protection data. This is necessary because each client has its own way to\nachieve the importation."),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sedge slashing-import --from slashing-data.json prysm\nsedge slashing-import --from slashing-data.json --stop-validator lodestar\nsedge slashing-import --from slashing-data.json --start-validator lighthouse\n")),(0,i.kt)("h3",{id:"slashing-export"},"Slashing export"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"sedge slashing-export [flags] [validator]")," command is used to export slashing protection data from the validator\nclient into a JSON file, following the ",(0,i.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-3076"},"EIP-3076: Slashing Protection Interchange Format")," standard."),(0,i.kt)("p",null,"This command assumes\nthat the validator client container exists, stopped or not and that its database\nis already initialized. Take in mind that the validator client generates slashing\nprotection data after some time running, so for some clients export slashing protection\ndata just after start the client could produce some errors."),(0,i.kt)("p",null,"This command stops the validator client during the exporting process due to the\nvalidator database being locked while it's running but leaves the validator client\nin the same state in which it was found. That means if the validator is running/stopped\nbefore the export, then the validator will be running/stopped after the command\nis executed, regardless of whether the export fails or not. To force a different\nbehavior use ",(0,i.kt)("inlineCode",{parentName:"p"},"--start-validator")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"--stop-validator")," flags."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"[validator]")," is a required argument used to specify which validator client, from\nall supported by Sedge (lighthouse, lodestar, prysm or teku), is used to exporting\nthe Slashing Protection data. This is necessary because each client has its own way\nto achieve the exportation."),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sedge slashing-export --out slashing-data.json prysm\nsedge slashing-export --out slashing-data.json --stop-validator lodestar\nsedge slashing-export --out slashing-data.json --start-validator lighthouse\n")))}h.isMDXComponent=!0}}]);