"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4512],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||a;return n?o.createElement(h,i(i({ref:t},u),{},{components:n})):o.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3555:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:3,id:"sepolia"},i="Sepolia",l={unversionedId:"networks/sepolia",id:"networks/sepolia",title:"Sepolia",description:"Sepolia is a permissioned Ethereum test network. Along Goerli, it is one of the testnets that is maintained after The Merge. The initial version of Sepolia used a proof-of-work (PoW) consensus mechanism. However, in the light of The Merge, Sepolia followed the mainnet\u2019s example and merged with the proof-of-stake (PoS) Sepolia Beacon Chain. So, Sepolia is now, just like Ethereum, a PoS chain. Furthermore, Sepolia is almost an identical copy of Ethereum, so it accurately mimics the mainnet and supports accurate testing. This enables developers to design, create, test, and track their project\u2019s public performance before going live.",source:"@site/docs/networks/sepolia.mdx",sourceDirName:"networks",slug:"/networks/sepolia",permalink:"/docs/networks/sepolia",draft:!1,editUrl:"https://github.com/NethermindEth/sedge/tree/main/docs/docs/networks/sepolia.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"sepolia"},sidebar:"tutorialSidebar",previous:{title:"Goerli",permalink:"/docs/networks/goerli"},next:{title:"Gnosis",permalink:"/docs/networks/gnosis"}},s={},p=[{value:"Supported Execution Clients",id:"supported-execution-clients",level:2},{value:"Supported Consensus Clients",id:"supported-consensus-clients",level:2},{value:"Supported Validator Clients",id:"supported-validator-clients",level:2},{value:"MEV-Boost",id:"mev-boost",level:2},{value:"Generating a Full Node",id:"generating-a-full-node",level:2},{value:"Generating a Full Node with a Validator",id:"generating-a-full-node-with-a-validator",level:2},{value:"Create keystore for validator",id:"create-keystore-for-validator",level:2},{value:"Running your setup",id:"running-your-setup",level:2}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sepolia"},"Sepolia"),(0,r.kt)("p",null,"Sepolia is a permissioned Ethereum test network. Along Goerli, it is one of the testnets that is maintained after The Merge. The initial version of Sepolia used a proof-of-work (PoW) consensus mechanism. However, in the light of The Merge, Sepolia followed the mainnet\u2019s example and merged with the proof-of-stake (PoS) Sepolia Beacon Chain. So, Sepolia is now, just like Ethereum, a PoS chain. Furthermore, Sepolia is almost an identical copy of Ethereum, so it accurately mimics the mainnet and supports accurate testing. This enables developers to design, create, test, and track their project\u2019s public performance before going live. "),(0,r.kt)("h2",{id:"supported-execution-clients"},"Supported Execution Clients"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.nethermind.io/"},"Nethermind")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://geth.ethereum.org/docs/"},"Geth")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/ledgerwatch/erigon"},"Erigon")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://besu.hyperledger.org/en/stable/"},"Besu"))),(0,r.kt)("h2",{id:"supported-consensus-clients"},"Supported Consensus Clients"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://lighthouse-book.sigmaprime.io/"},"Lighthouse")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://chainsafe.github.io/lodestar/"},"Lodestar")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.prylabs.network/docs/getting-started/"},"Prysm")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.teku.consensys.net/en/latest/"},"Teku"))),(0,r.kt)("h2",{id:"supported-validator-clients"},"Supported Validator Clients"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://lighthouse-book.sigmaprime.io/"},"Lighthouse")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://chainsafe.github.io/lodestar/"},"Lodestar")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.prylabs.network/docs/getting-started/"},"Prysm")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.teku.consensys.net/en/latest/"},"Teku"))),(0,r.kt)("h2",{id:"mev-boost"},"MEV-Boost"),(0,r.kt)("p",null,"We support ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/flashbots/mev-boost"},"mev-boost")," on sepolia by default, in case you want to remove it,\nrun ",(0,r.kt)("inlineCode",{parentName:"p"},"sedge generate full-node")," using the ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-mev-boost")," flag, for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sedge generate full-node --network=sepolia --no-mev-boost=true\n")),(0,r.kt)("h2",{id:"generating-a-full-node"},"Generating a Full Node"),(0,r.kt)("p",null,"To generate a setup of a full node (without a validator node) with random clients, you only need to add the ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-validator")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"sedge generate full-node"),". For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sedge generate full-node --no-validator --network=sepolia\n")),(0,r.kt)("h2",{id:"generating-a-full-node-with-a-validator"},"Generating a Full Node with a Validator"),(0,r.kt)("p",null,"To generate a setup of a validator with random clients, you need to omit the ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-validator")," flag. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sedge generate full-node --network=sepolia\n")),(0,r.kt)("h2",{id:"create-keystore-for-validator"},"Create keystore for validator"),(0,r.kt)("p",null,"To create a keystore for a validator, you need to run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sedge keys --network sepolia\n")),(0,r.kt)("h2",{id:"running-your-setup"},"Running your setup"),(0,r.kt)("p",null,"Once you have generated your setup, you can run it with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sedge run\n")))}d.isMDXComponent=!0}}]);