"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[426],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=o.createContext({}),d=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=d(e.components);return o.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(t),h=i,m=u["".concat(l,".").concat(h)]||u[h]||p[h]||a;return t?o.createElement(m,r(r({ref:n},c),{},{components:t})):o.createElement(m,r({ref:n},c))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var d=2;d<a;d++)r[d]=t[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>r});var o=t(7294),i=t(6010);const a="tabItem_Ymn6";function r(e){let{children:n,hidden:t,className:r}=e;return o.createElement("div",{role:"tabpanel",className:(0,i.Z)(a,r),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>h});var o=t(7462),i=t(7294),a=t(6010),r=t(2389),s=t(7392),l=t(7094),d=t(2466);const c="tabList__CuJ",p="tabItem_LNqP";function u(e){var n;const{lazy:t,block:r,defaultValue:u,values:h,groupId:m,className:g}=e,k=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=h??k.map((e=>{let{props:{value:n,label:t,attributes:o}}=e;return{value:n,label:t,attributes:o}})),f=(0,s.l)(y,((e,n)=>e.value===n.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===u?u:u??(null==(n=k.find((e=>e.props.default)))?void 0:n.props.value)??k[0].props.value;if(null!==N&&!y.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:w,setTabGroupChoices:X}=(0,l.U)(),[v,b]=(0,i.useState)(N),E=[],{blockElementScrollPositionUntilNextRender:I}=(0,d.o5)();if(null!=m){const e=w[m];null!=e&&e!==v&&y.some((n=>n.value===e))&&b(e)}const O=e=>{const n=e.currentTarget,t=E.indexOf(n),o=y[t].value;o!==v&&(I(n),b(o),null!=m&&X(m,String(o)))},T=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=E.indexOf(e.currentTarget)+1;t=E[n]??E[0];break}case"ArrowLeft":{const n=E.indexOf(e.currentTarget)-1;t=E[n]??E[E.length-1];break}}null==(n=t)||n.focus()};return i.createElement("div",{className:(0,a.Z)("tabs-container",c)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":r},g)},y.map((e=>{let{value:n,label:t,attributes:r}=e;return i.createElement("li",(0,o.Z)({role:"tab",tabIndex:v===n?0:-1,"aria-selected":v===n,key:n,ref:e=>E.push(e),onKeyDown:T,onFocus:O,onClick:O},r,{className:(0,a.Z)("tabs__item",p,null==r?void 0:r.className,{"tabs__item--active":v===n})}),t??n)}))),t?(0,i.cloneElement)(k.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},k.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==v})))))}function h(e){const n=(0,r.Z)();return i.createElement(u,(0,o.Z)({key:String(n)},e))}},7293:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>p});var o=t(7462),i=(t(7294),t(3905)),a=t(5488),r=t(5162);const s={sidebar_position:4,id:"complete-guide"},l="Complete quickstart guide",d={unversionedId:"quickstart/complete-guide",id:"quickstart/complete-guide",title:"Complete quickstart guide",description:"Sedge is a one-click setup tool that you can use to set up and run a validator on Ethereum easily and without any prior knowledge. In this guide, you will go through every step in the validator setup using Sedge, along with detailed explanations for beginners.",source:"@site/docs/quickstart/complete-guide.mdx",sourceDirName:"quickstart",slug:"/quickstart/complete-guide",permalink:"/docs/quickstart/complete-guide",draft:!1,editUrl:"https://github.com/NethermindEth/sedge/tree/main/docs/docs/quickstart/complete-guide.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,id:"complete-guide"},sidebar:"tutorialSidebar",previous:{title:"Installation guide",permalink:"/docs/quickstart/install-guide"},next:{title:"Run a validator on Mainnet with one click",permalink:"/docs/quickstart/run-validator"}},c={},p=[{value:"Overview",id:"overview",level:2},{value:"1. Download and install Sedge in a new brand Linux machine",id:"1-download-and-install-sedge-in-a-new-brand-linux-machine",level:3},{value:"2. Run Sedge&#39;s main workflow with default configuration values",id:"2-run-sedges-main-workflow-with-default-configuration-values",level:3},{value:"3. Generate a <code>docker-compose</code> script with a randomized set of execution, consensus and validator clients",id:"3-generate-a-docker-compose-script-with-a-randomized-set-of-execution-consensus-and-validator-clients",level:3},{value:"4. Run the <code>docker-compose</code> script",id:"4-run-the-docker-compose-script",level:3},{value:"5. Generate validator keystore",id:"5-generate-validator-keystore",level:3},{value:"6. Final steps",id:"6-final-steps",level:3},{value:"Conclusions",id:"conclusions",level:3}],u={toc:p};function h(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"complete-quickstart-guide"},"Complete quickstart guide"),(0,i.kt)("p",null,"Sedge is a one-click setup tool that you can use to set up and run a validator on Ethereum easily and without any prior knowledge. In this guide, you will go through every step in the validator setup using Sedge, along with detailed explanations for beginners. "),(0,i.kt)("p",null,"This is a beginner-friendly guide. Familiarity with the command line is expected, but otherwise, this guide makes no assumptions about your technical skills or prior knowledge."),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"We will walk through the following steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Download and install Sedge in a new brand machine"),(0,i.kt)("li",{parentName:"ol"},"Run Sedge's main workflow with default configuration values and use it to install dependencies (only for Linux)"),(0,i.kt)("li",{parentName:"ol"},"Generate a ",(0,i.kt)("inlineCode",{parentName:"li"},"docker-compose")," script with a randomized set of execution, consensus and validator clients"),(0,i.kt)("li",{parentName:"ol"},"Run the ",(0,i.kt)("inlineCode",{parentName:"li"},"docker-compose")," script"),(0,i.kt)("li",{parentName:"ol"},"Generate validator keystore")),(0,i.kt)("p",null,"The hardware specifications of the machine we are going to use are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"4 CPU cores"),(0,i.kt)("li",{parentName:"ul"},"8 GB RAM"),(0,i.kt)("li",{parentName:"ul"},"200 SSD"),(0,i.kt)("li",{parentName:"ul"},"Ubuntu 22.04/amd64")),(0,i.kt)("h3",{id:"1-download-and-install-sedge-in-a-new-brand-linux-machine"},"1. Download and install Sedge in a new brand Linux machine"),(0,i.kt)("p",null,"First open a console in the Home directory. Then use ",(0,i.kt)("inlineCode",{parentName:"p"},"curl")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"wget")," to download a binary from the releases page (we will be using the ",(0,i.kt)("inlineCode",{parentName:"p"},"0.1.2")," version). Check the ",(0,i.kt)("a",{parentName:"p",href:"install-guide"},"installation guide")," for more information or if you want to use another installation method:"),(0,i.kt)(a.Z,{groupId:"download-cmds",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"curl",label:"curl",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"curl -L https://github.com/NethermindEth/sedge/releases/download/0.1.2/sedge-v0.1.2-linux-amd64 --output sedge\n"))),(0,i.kt)(r.Z,{value:"wget",label:"wget",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"wget https://github.com/NethermindEth/sedge/releases/download/0.1.2/sedge-v0.1.2-linux-amd64 -O sedge\n")))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"-O")," flag is to rename binary as ",(0,i.kt)("strong",{parentName:"p"},"sedge"))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"$")," symbol represents the Terminal prompt")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This guide assumes your Terminal session is pointing all the time to the folder in which you downloaded Sedge. You can check the directory pointed by your Terminal session if you execute ",(0,i.kt)("inlineCode",{parentName:"p"},"pwd"),". ")),(0,i.kt)("p",null,"You can run ",(0,i.kt)("inlineCode",{parentName:"p"},"ls")," to print the files and directories on the current directory and check the binary was downloaded correctly."),(0,i.kt)("p",null,"Set binary as executable executing ",(0,i.kt)("inlineCode",{parentName:"p"},"chmod +x sedge"),". You shouldn't see any output or logs if the command was successful"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"(Optional)")," Run Sedge ",(0,i.kt)("inlineCode",{parentName:"p"},"./sedge --help")," to check if the executable is ok. The ",(0,i.kt)("inlineCode",{parentName:"p"},".")," represents the current directory (where your terminal session is pointing to)."),(0,i.kt)("h3",{id:"2-run-sedges-main-workflow-with-default-configuration-values"},"2. Run Sedge's main workflow with default configuration values"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"cli")," is Sedge's main command. This command takes care of the entire validator setup and is highly customizable. We will run it without flags and walk through the process:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Initialization"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-logs"},'$ ./sedge cli\n\nInitializing configuration\nConfig File ".sedge" Not Found in "[/home/sedge]"\nConfig file not found on the path provided nor in the home directory\n# highlight-next-line\nGenerating config file in the /home/sedge directory\n2022-XX-XX 00:00:00 -- [INFO] [Logger Init] Logging configuration: {Level:info}\n# highlight-start\n2022-XX-XX 00:00:00 -- [WARN] Execution client not provided. A random client will be selected. Random client: nethermind\n2022-XX-XX 00:00:00 -- [WARN] Consensus and validator clients not provided. Selecting same pair of clients for consensus and validator clients using a random client. Random client: lighthouse\n# highlight-end\n')),(0,i.kt)("admonition",{parentName:"li",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"logs")," shown by Sedge in every step will be displayed and explained. You should compare your ",(0,i.kt)("inlineCode",{parentName:"p"},"logs")," with the ones in this guide to check everything went as expected. Note that some logs are ",(0,i.kt)("strong",{parentName:"p"},"highlighted"),".")),(0,i.kt)("p",{parentName:"li"},"  As you can see, a configuration file was generated. This configuration file is generated with default values and we don't need to worry about it for this guide. "),(0,i.kt)("p",{parentName:"li"},"  As we didn't specify the clients to be used in the setup, they were randomly choosen. Nethermind was choosen as the execution client and Lighthouse for the consensus layer.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Check if dependencies are installed"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"2022-XX-XX 00:00:00 -- [INFO] Checking dependencies: docker\n")),(0,i.kt)(a.Z,{groupId:"dependency-check",mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"linux",label:"Linux",mdxType:"TabItem"},(0,i.kt)("p",{parentName:"li"},"If a dependency is missing, Sedge will print instructions to install it and a prompt will be shown to let you decide between letting Sedge install it for you or exit and installing it on your own. (Only for Linux)"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-logs"},'# highlight-start\n2022-XX-XX 00:00:00 -- [ERRO] dependency docker is not installed on host machine\n2022-XX-XX 00:00:00 -- [INFO] pending dependencies: docker\n2022-XX-XX 00:00:00 -- [INFO] Instructions for docker\n# highlight-end\n\nsudo apt-get update\n\nsudo apt apt-get install -y \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    software-properties-common\n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --batch --yes --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\necho \\\n"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\nsudo apt-get update\nsudo apt-get install -y docker-ce\n\nDOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}\nsudo mkdir -p $DOCKER_CONFIG/cli-plugins\nsudo curl -SL "https://github.com/docker/compose/releases/download/v2.6.1/docker-compose-$(uname -s)-$(uname -m)" -o $DOCKER_CONFIG/cli-plugins/docker-compose\nsudo chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose\n\n# highlight-start\nUse the arrow keys to navigate: \u2193 \u2191 \u2192 \u2190\n? Select how to proceed with the pending dependencies:\n\u25b8 Install dependencies\n    Exit. You will manage these dependencies on your own\n# highlight-end\n')),(0,i.kt)("p",{parentName:"li"},"We will go with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Install dependencies")," option, but feel free to go with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Exit")," option, install dependencies on your own and then run Sedge again.")),(0,i.kt)(r.Z,{value:"macos",label:"macOS",mdxType:"TabItem"},(0,i.kt)("p",{parentName:"li"},"  If you have missing dependencies, then you need to install it first. Search for instructions in the ",(0,i.kt)("a",{parentName:"p",href:"dependencies"},"dependencies guide"),"."))),(0,i.kt)("p",{parentName:"li"},"  If dependencies were successfully installed, then you should see this log:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"2022-XX-XX 00:00:00 -- [INFO] All dependencies are installed on host machine\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Enter ",(0,i.kt)("a",{parentName:"p",href:"/docs/concepts/fee-recipient"},"fee recipient")," address"))),(0,i.kt)("p",null,"A new prompt will be shown for the fee recipient address. Although you can skip it by pressing enter, we don't recommend doing so."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u2714 Please enter the Fee Recipient address. You can leave it blank and press enter (not recommended):\n")),(0,i.kt)("h3",{id:"3-generate-a-docker-compose-script-with-a-randomized-set-of-execution-consensus-and-validator-clients"},"3. Generate a ",(0,i.kt)("inlineCode",{parentName:"h3"},"docker-compose")," script with a randomized set of execution, consensus and validator clients"),(0,i.kt)("p",null,"The following step will be done automatically."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-logs"},'# highlight-next-line\n2022-XX-XX 00:00:00 -- [INFO] Generating docker-compose script for current selection of clients\n2022-XX-XX 00:00:00 -- [INFO] File docker-compose.yml:\n\nversion: "3.9"\n\nservices:\n\n  execution:\n    stop_grace_period: 1m\n    container_name: execution-client\n    restart: unless-stopped\n    image: ${EC_IMAGE_VERSION}\n    networks:\n      - sedge\n    volumes:\n      - ${EC_DATA_DIR}:/nethermind/data\n    ports:\n      - "30303:30303/tcp"\n      - "30303:30303/udp"\n    expose:\n      - 8545\n      - 8551\n    command:\n      - --config=${NETWORK}\n      - --datadir=/nethermind/data\n      - --log=${NETHERMIND_LOG_LEVEL}\n      - --Sync.SnapSync=${EC_SNAP_SYNC_ENABLED}\n      - --JsonRpc.Enabled=true\n      - --JsonRpc.Host=0.0.0.0\n      - --JsonRpc.Port=8545\n      - --JsonRpc.EnabledModules=${EC_ENABLED_MODULES}\n      - --JsonRpc.JwtSecretFile=/tmp/jwt/jwtsecret\n      - --JsonRpc.EngineHost=0.0.0.0\n      - --JsonRpc.EnginePort=8551\n      - --Network.DiscoveryPort=30303\n      - --HealthChecks.Enabled=${NETHERMIND_HEALTH_CHECKS_ENABLED}\n      - --Pruning.CacheMb=${NETHERMIND_PRUNING_CACHEMB}\n    logging:\n      driver: "json-file"\n      options:\n        max-size: "10m"\n        max-file: "10"\n\n  consensus:\n    stop_grace_period: 1m\n    container_name: consensus-client\n    restart: unless-stopped\n    image: ${CC_IMAGE_VERSION}\n    networks:\n      - sedge\n    volumes:\n      - ${CC_DATA_DIR}:/var/lib/lighthouse\n    ports:\n      - "9000:9000/tcp"\n      - "9000:9000/udp"\n      - "5054:5054/tcp"\n    expose:\n      - 4000\n    command:\n      - lighthouse\n      - bn\n      - --disable-upnp\n      - --datadir=/var/lib/lighthouse\n      - --port=9000\n      - --http\n      - --http-address=0.0.0.0\n      - --http-port=4000\n      - --network=${NETWORK}\n      - --target-peers=${CC_PEER_COUNT}\n      - --execution-endpoints=${EC_AUTH_URL}\n      - --execution-jwt=/tmp/jwt/jwtsecret\n      - --eth1-endpoints=${EC_API_URL}\n      - --eth1-endpoints=${EC_API_URL}\n      - --eth1-blocks-per-log-query=150\n      - --debug-level=${CC_LOG_LEVEL}\n      - --validator-monitor-auto\n      - --subscribe-all-subnets\n      - --import-all-attestations\n      - --metrics\n      - --metrics-port=5054\n      - --metrics-address=0.0.0.0\n    logging:\n      driver: "json-file"\n      options:\n        max-size: "10m"\n        max-file: "10"\n\n  validator-import:\n    container_name: validator-import-client\n    build:\n      context: github.com/NethermindEth/lighthouse-init-validator\n      args:\n        LH_VERSION: ${VL_IMAGE_VERSION}\n        NETWORK: ${NETWORK}\n    networks:\n      - sedge\n    volumes:\n      - ${KEYSTORE_DIR}:/keystore\n      - ${VL_DATA_DIR}:/data \n\n  validator:\n    container_name: validator-client\n    image: ${VL_IMAGE_VERSION}\n    depends_on:\n      validator-import:\n        condition: service_completed_successfully\n    networks:\n      - sedge\n    ports:\n      - "5056:5056"\n    volumes:\n      - ${VL_DATA_DIR}:/var/lib/lighthouse\n    command:\n      - lighthouse\n      - vc\n      - --beacon-nodes=${CC_API_URL}\n      - --graffiti=${GRAFFITI}\n      - --network=${NETWORK}\n      - --debug-level=${VL_LOG_LEVEL}\n      - --validators-dir=/data/validators\n      - --metrics\n      - --metrics-port=5056\n      - --metrics-address=0.0.0.0\n    logging:\n      driver: "json-file"\n      options:\n        max-size: "10m"\n        max-file: "10"\n\nnetworks:\n  sedge:\n    name: sedge_network\n\n# highlight-start\n2022-XX-XX 00:00:00 -- [INFO] Created file docker-compose-scripts/docker-compose.yml\n2022-XX-XX 00:00:00 -- [INFO] Generating environment file for current selection of clients\n# highlight-end\n2022-XX-XX 00:00:00 -- [INFO] File .env:\n\n# --- Global configuration ---\nNETWORK=mainnet\n\n# --- Execution Layer - Execution Node - configuration ---\nEC_IMAGE_VERSION=nethermind/nethermind\nNETHERMIND_LOG_LEVEL=INFO\nEC_ENABLED_MODULES=[Web3,Eth,Subscribe,Net]\nNETHERMIND_HEALTH_CHECKS_ENABLED=false\nNETHERMIND_PRUNING_CACHEMB=2048\nEC_DATA_DIR=./execution-data\nEC_SNAP_SYNC_ENABLED=true\n\n# --- Consensus Layer - Beacon Node - configuration ---\nCC_PEER_COUNT=50\nCC_LOG_LEVEL=info\nEC_API_URL=http://execution:8545\nCC_INSTANCE_NAME=Lighthouse\nCC_IMAGE_VERSION=sigp/lighthouse:latest\nCC_DATA_DIR=./consensus-data\n\n# --- Consensus Layer - Validator Node - configuration ---\nCC_API_URL=http://consensus:4000\nGRAFFITI=nethermind\nVL_LOG_LEVEL=info\nVL_INSTANCE_NAME=LighthouseValidator\nVL_IMAGE_VERSION=sigp/lighthouse:latest\nKEYSTORE_DIR=./keystore\nVL_DATA_DIR=./validator-data\n\n# highlight-next-line\n2022-XX-XX 00:00:00 -- [INFO] Created file docker-compose-scripts/.env\n')),(0,i.kt)("h3",{id:"4-run-the-docker-compose-script"},"4. Run the ",(0,i.kt)("inlineCode",{parentName:"h3"},"docker-compose")," script"),(0,i.kt)("p",null,"Instructions on how to run the docker-compose script will be displayed and next to it is a confirmation prompt."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-logs"},"2022-XX-XX 00:00:00 -- [INFO] Instructions for running docker-compose script\n\ndocker compose -f docker-compose-scripts/docker-compose.yml up -d execution consensus\n\n# highlight-next-line\n? Run the script with the selected services execution, consensus? [Y/n]\n")),(0,i.kt)("p",null,'Notice that it says "Run the script with the selected services ',(0,i.kt)("strong",{parentName:"p"},"execution, consensus"),'?". This is because, by default, only these nodes will be up and running at the beginning, as they need to first sync with the network and this can take days.'),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"On some testnets the sync process takes hours depending on the network age and your internet bandwidth")),(0,i.kt)("p",null,"Sedge will track the syncing progress of the execution and consensus nodes, and after they are completely synced, Sedge will automatically spin up the validator node. This gives you time to prepare the validator keystore (we will do that shortly) and to become familiar with the validator registration."),(0,i.kt)("p",null,"Now type ",(0,i.kt)("inlineCode",{parentName:"p"},"Y")," or enter to start the following flow (You need to read carefully all the logs from now on):"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Docker commands need to be executed with ",(0,i.kt)("inlineCode",{parentName:"p"},"sudo")," by default, which requires root permissions and hence a ",(0,i.kt)("strong",{parentName:"p"},"password prompt may arise"),". Sedge only executes the commands that are shown in the logs, and you can also check the codebase to check that there's nothing nasty running under the hood. The codebase is public and fully visible on the Github repo.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Check if docker engine is on"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"2022-XX-XX 00:00:00 -- [INFO] Checking if docker engine is on\n2022-XX-XX 00:00:00 -- [INFO] Running command: docker ps -a\n")),(0,i.kt)("p",{parentName:"li"},"  Sedge runs ",(0,i.kt)("inlineCode",{parentName:"p"},"docker ps -a")," to check if docker engine is on. You might have previously installed docker, but this does not mean docker is up and running. Docker engine is usually off when you use Docker Desktop and doesn't have the app on. If this is your case, just start Docker Desktop."),(0,i.kt)("p",{parentName:"li"},"  In this case, docker engine is on.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Run the docker-compose script"),(0,i.kt)("p",{parentName:"li"},"  In this step, the docker-compose script will be executed, which needs to pull the client's docker images from Docker Hub. This can take a while depending on your internet connection."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"2022-XX-XX 00:00:00 -- [INFO] Running command: docker compose -f docker-compose-scripts/docker-compose.yml up -d execution consensus\n[+] Running 13/13\n\u283f consensus Pulled\n    \u283f 45ea9169a5e4 Pull complete\n    \u283f 9587c7a34752 Pull complete\n\u283f execution Pulled\n    \u283f 405f018f9d1d Pull complete\n    \u283f 026cbc59cccf Pull complete\n    \u283f bd9aeeeca91c Pull complete\n    \u283f 14c2bd6cb1ae Pull complete\n    \u283f 49b80f5c597c Pull complete\n    \u283f 5d26e9f3c617 Pull complete\n    \u283f 44860d1d6af8 Pull complete\n    \u283f a9132ab111ad Pull complete\n    \u283f d8334d965894 Pull complete\n[+] Running 3/3\n\u283f Network sedge_network       Created\n\u283f Container consensus-client  Started\n\u283f Container execution-client  Started\n")),(0,i.kt)("p",{parentName:"li"},"  The above logs are an example of healthy logs when going through this step.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Display running nodes"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},'2022-XX-XX 00:00:00 -- [INFO] Running command: docker compose -f docker-compose-scripts/docker-compose.yml ps --filter status=running\nNAME                COMMAND                  SERVICE             STATUS              PORTS\nconsensus-client    "lighthouse bn --dis\u2026"   consensus           running             0.0.0.0:5054->5054/tcp, :::5054->5054/tcp, 4000/tcp, 0.0.0.0:9000->9000/tcp, :::9000->9000/tcp, 0.0.0.0:9000->9000/udp, :::9000->9000/udp\nexecution-client    "./Nethermind.Runner\u2026"   execution           running             0.0.0.0:8008->8008/tcp, :::8008->8008/tcp, 0.0.0.0:30303->30303/tcp, :::30303->30303/tcp, 8545/tcp, 0.0.0.0:30303->30303/udp, :::30303->30303/udp\n')),(0,i.kt)("p",{parentName:"li"},"  Double check there are both ",(0,i.kt)("inlineCode",{parentName:"p"},"consensus-client")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"execution-client")," entries. If one of them is missing then, something ",(0,i.kt)("a",{parentName:"p",href:"/docs/troubleshooting"},"has gone wrong"),". ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Futher instructions"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"2022-XX-XX 00:00:00 -- [INFO]\nA validator node needs to connect to a synced consensus node, and the consensus node, in turn, needs to connect to a synced execution node.\n\nWhile these required nodes (execution/consensus) are syncing, you can setup the keystore folder(s) using the staking-deposit-cli tool (https://github.com/ethereum/staking-deposit-cli) or the command 'sedge keys'. If you don't want to use 'sedge keys', make sure to set .env variables KEYSTORE_DIR and VL_DATA_DIR to correct values. You can also check https://launchpad.ethereum.org/ for tips and more instructions.\n\nSedge will track the syncing progress of the required nodes and let you run the validator after those nodes are synced (as we recommend). This takes a while, so you have time to prepare the keystore folder.\n\nDon't make the deposit to register the validator until it's ready to run!!!\n\nAfter you complete the above steps, follow https://launchpad.ethereum.org/ instructions to register the validator addresses of the validators you want to set up and manage using the validator node.\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Track sync of execution and consensus node"),(0,i.kt)("p",{parentName:"li"},"  First Sedge needs to get the IP address of the execution and consensus containers within the docker network. You don't need to worry about that if this is very technical for you."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"2022-XX-XX 00:00:00 -- [INFO] Proceding to get execution and consensus containers IP address for the monitoring tool\n2022-XX-XX 00:00:00 -- [INFO] Running command: docker compose -f docker-compose-scripts/docker-compose.yml ps --quiet execution\n2022-XX-XX 00:00:00 -- [INFO] Running command: docker inspect 13d0364c2ea3016c689def9b9e3e0f1d060ccca033274f3d30b8e2998a13a392\n\n2022-XX-XX 00:00:00 -- [INFO] Running command: docker compose -f docker-compose-scripts/docker-compose.yml ps --quiet consensus\n2022-XX-XX 00:00:00 -- [INFO] Running command: docker inspect 5f22960d056013b25a884e21462e019ee4ed50eccb3a065ba14cfa4eed17820e\n")),(0,i.kt)("p",{parentName:"li"},"  Now Sedge will use an external monitoring tool to track the syncing progress. Your logs should be similar to this:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-logs"},'2022-XX-XX 00:00:00 -- [INFO] [ETH2 Monitor] [TrackSync] Tracking sync progress of consensus nodes...\n2022-XX-XX 00:00:00 -- [ERRO] [GetRequest] request failed. Error: Get "http://172.19.0.2:4000/eth/v1/node/syncing": dial tcp 172.19.0.2:4000: connect: connection refused\n2022-XX-XX 00:00:00 -- [INFO] [GetRequest] Retrying request\n2022-XX-XX 00:00:00 -- [ERRO] [GetRequest] request failed. Error: Get "http://172.19.0.2:4000/eth/v1/node/syncing": dial tcp 172.19.0.2:4000: connect: connection refused\n2022-XX-XX 00:00:00 -- [INFO] [GetRequest] Retrying request\n2022-XX-XX 00:00:00 -- [ERRO] [GetRequest] request failed. Error: Get "http://172.19.0.2:4000/eth/v1/node/syncing": dial tcp 172.19.0.2:4000: connect: connection refused\n2022-XX-XX 00:00:00 -- [INFO] [GetRequest] Retrying request\n2022-XX-XX 00:00:00 -- [ERRO] [GetRequest] request failed. Error: Get "http://172.19.0.2:4000/eth/v1/node/syncing": dial tcp 172.19.0.2:4000: connect: connection refused\n2022-XX-XX 00:00:00 -- [INFO] [GetRequest] Retrying request\n2022-XX-XX 00:00:00 -- [ERRO] [GetRequest] request failed. Error: Get "http://172.19.0.2:4000/eth/v1/node/syncing": dial tcp 172.19.0.2:4000: connect: connection refused\n2022-XX-XX 00:00:00 -- [INFO] [GetRequest] Retrying request\n2022-XX-XX 00:00:00 -- [INFO] [ETH2 Monitor] [TrackSync] Endpoint http://172.19.0.2:4000 is syncing\n2022-XX-XX 00:00:00 -- [INFO] [ETH2 Monitor] [TrackSync] Tracking sync progress of execution nodes...\n2022-XX-XX 00:00:00 -- [ERRO] [PostRequest] request failed. Error: Post "http://172.19.0.3:8545": dial tcp 172.19.0.3:8545: connect: connection refused\n2022-XX-XX 00:00:00 -- [INFO] [PostRequest] Retrying request\n2022-XX-XX 00:00:00 -- [ERRO] [PostRequest] request failed. Error: Post "http://172.19.0.3:8545": dial tcp 172.19.0.3:8545: connect: connection refused\n2022-XX-XX 00:00:00 -- [INFO] [PostRequest] Retrying request\n2022-XX-XX 00:00:00 -- [ERRO] [PostRequest] request failed. Error: Post "http://172.19.0.3:8545": dial tcp 172.19.0.3:8545: connect: connection refused\n2022-XX-XX 00:00:00 -- [INFO] [PostRequest] Retrying request\n2022-XX-XX 00:00:00 -- [INFO] [ETH2 Monitor] [TrackSync] Endpoint http://172.19.0.3:8545 is synced\n# highlight-start\n2022-XX-XX 00:05:00 -- [INFO] [ETH2 Monitor] [TrackSync] Tracking sync progress of consensus nodes...\n2022-XX-XX 00:05:00 -- [INFO] [ETH2 Monitor] [TrackSync] Endpoint http://172.19.0.2:4000 is syncing\n2022-XX-XX 00:05:00 -- [INFO] [ETH2 Monitor] [TrackSync] Tracking sync progress of execution nodes...\n2022-XX-XX 00:05:00 -- [INFO] [ETH2 Monitor] [TrackSync] Endpoint http://172.19.0.3:8545 is syncing\n# highlight-end\n')),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"It's normal that some requests fail")," at the beginning because the nodes are not ready yet. It should take a few minutes for the nodes to be ready. Once they are ready, you shouldn't see more failed requests unless there is a network problem in your machine or you shut down the nodes."),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("strong",{parentName:"p"},"It's also normal to see some logs saying a node is synced")," at the beginning. These are false reports from the node itself. Sedge knows how to handle this and can tell if a node is truly synced. "),(0,i.kt)("p",{parentName:"li"},"  You will see logs like this for a long time and every 5 minutes (until the nodes are synced):"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"    2022-XX-XX 00:00:00 -- [INFO] [ETH2 Monitor] [TrackSync] Tracking sync progress of consensus nodes...\n    2022-XX-XX 00:00:00 -- [INFO] [ETH2 Monitor] [TrackSync] Endpoint http://172.19.0.2:4000 is syncing\n    2022-XX-XX 00:00:00 -- [INFO] [ETH2 Monitor] [TrackSync] Tracking sync progress of execution nodes...\n    2022-XX-XX 00:00:00 -- [INFO] [ETH2 Monitor] [TrackSync] Endpoint http://172.19.0.3:8545 is syncing\n")))),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The date and time of the logs were modified to show more generic logs. Until this step, and depending on your internet connection, the entire process should take just a few minutes.")),(0,i.kt)("h3",{id:"5-generate-validator-keystore"},"5. Generate validator keystore"),(0,i.kt)("p",null,"Sedge uses the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ethereum/staking-deposit-cli"},"staking-deposit-cli")," tool docker image for mainnet to generate the ",(0,i.kt)("a",{parentName:"p",href:"/docs/concepts/keystore"},"validator keystore"),", and uses our own experimental code for the rest of the supported networks. "),(0,i.kt)("admonition",{title:"Disclaimer",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Users acknowledge that staking-deposit-cli is an external tool, which means that Nethermind exercises no control over its functioning and does not accept any liability for any issues that may arise from using the tool.")),(0,i.kt)("admonition",{title:"Disclaimer",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Users acknowledge that generating the keystore for any network other than the mainnet is an experimental and unaudited feature of Sedge. Nethermind provides this feature on an \u2018as is\u2019 basis and makes no warranties regarding its proper functioning. The use of this feature is at the user\u2019s own risk - Nethermind excludes all liability for any malfunction or loss of money that may occur as the result of an unexpected behavior during the keystore generation.")),(0,i.kt)("p",null,"To get started, first open another Terminal on the same working directory we used before (where the binary is located). Then run the following command to quickly generate the keystore:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"./sedge keys\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"keys")," command will first check if Docker is installed (because use docker to run the staking-deposit-cli docker image). As we already installed Docker in the previous steps, Sedge will continue the process."),(0,i.kt)("p",null,"The next step involves a prompt for an Eth1 address to be used to create the ",(0,i.kt)("a",{parentName:"p",href:"/docs/concepts/keystore"},"withdrawal credentials"),". If you don't provide one, then the tool will generate withdrawal credentials with the mnemonic-derived withdrawal public key."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-logs"},"Initializing configuration\nUsing config file: /Users/teno/.sedge.yaml\n2022-XX-XX 00:00:00 -- [INFO] [Logger Init] Logging configuration: {Level:info}\n2022-XX-XX 00:00:00 -- [INFO] All dependencies are installed on host machine\n# highlight-next-line\n\u2714 Please enter a Eth1 address to be used to create the withdrawal credentials. You can leave it blank and press enter:\n")),(0,i.kt)("p",null,"The keystore must be secured with a password with a minimum length of 8. Sedge will ask you to provide this password so it can be used by the staking-deposit-cli to secure the generated keystore and then create a ",(0,i.kt)("inlineCode",{parentName:"p"},"keystore_password.txt")," for the validator node. The password input will be hidden so you don't need to worry about your password getting registered in the Terminal logs or history."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u2714 Please enter the password you will use for the validator keystore: ********\u2588\nPlease enter the password you will use for the validator keystore: ********\n\u2714 Please re-enter the password. Press Ctrl+C to retry: ********\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"A ",(0,i.kt)("strong",{parentName:"p"},"password prompt")," may show up again because Sedge uses docker commands to run the staking-deposit-cli docker image, and these commands need to be executed with ",(0,i.kt)("inlineCode",{parentName:"p"},"sudo")," by default. The required password is your ",(0,i.kt)("strong",{parentName:"p"},"machine password"),", not the keystore password.")),(0,i.kt)("p",null,"From here, the rest of the flow belongs to the staking-deposit-cli tool:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"2022-XX-XX 00:00:00 -- [INFO] Generating keystore folder\n2022-XX-XX 00:00:00 -- [INFO] Running command:\ndocker run -it --rm -v /home/sedge/docker-compose-scripts/keystore/validator_keys:/app/validator_keys nethermindeth/staking-deposit-cli new-mnemonic --chain mainnet --keystore_password ********\nPlease choose your language ['1. \u0627\u0644\u0639\u0631\u0628\u064a\u0629', '2. \u03b5\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac', '3. English', '4. Fran\xe7ais', '5. Bahasa melayu', '6. Italiano', '7. \u65e5\u672c\u8a9e', '8. \ud55c\uad6d\uc5b4', '9. Portugu\xeas do Brasil', '10. rom\xe2n', '11. \u7b80\u4f53\u4e2d\u6587']:  [English]:\nRepeat your keystore password for confirmation:\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Be sure to type correctly the keystore password previously provided to Sedge. If you don't insert the same password, then staking-deposit-cli will ask you to create a new password. If this happens, you have two options:"),(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},"Exit the program and try again."),(0,i.kt)("li",{parentName:"ol"},"Finish the execution flow, generating the keystore successfully in the process. Then you need to update the ",(0,i.kt)("inlineCode",{parentName:"li"},"keystore_password.txt")," file inside the ",(0,i.kt)("inlineCode",{parentName:"li"},"keystore")," folder with the password you provided to the staking-deposit-cli tool. "))),(0,i.kt)("p",null,"The staking-deposit-cli tool lets you create a keystore using an existing mnemonic or by creating a new one. By default, Sedge's ",(0,i.kt)("inlineCode",{parentName:"p"},"keys")," command goes with creating a new mnemonic."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Please choose your mnemonic language ['1. \u7b80\u4f53\u4e2d\u6587', '2. \u7e41\u9ad4\u4e2d\u6587', '3. \u010de\u0161tina', '4. English', '5. Italiano', '6. \ud55c\uad6d\uc5b4', '7. Portugu\xeas', '8. Espa\xf1ol']:  [english]:\nPlease choose how many new validators you wish to run:\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"One validator node can handle hundreds of validators (validator keys). We recommend to run at most 500 validators within a single validator node. We will go with 1 validator this time.")),(0,i.kt)("p",null,"After you choose how many new validators you wish to run, a newly generated mnemonic will be displayed. You must copy it using safe methods such as pen and paper. Then you will be asked to insert the mnemonic for validation. This is the final step, after which the keystore will be generated:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"                  #####     #####\n                ##     #####     ##\n    ###         ##   #######     #########################\n    ##  ##      #####               ##                   ##\n    ##     #####                 ##                       ##\n    ##     ##                     ##                      ###\n   ########                        ##                     ####\n   ##        ##   ###         #####                       #####\n   #                          ##                         # #####\n   #                            #                        #  #####\n   ##                             ##                    ##\n   ##                              ##                   ##\n   ##             ###              ##                   ##\n   ###############                 ##                   ##\n   ###               ##                                 ##\n      #############################                    ##\n                     ##                             ###\n                     #######     #################     ###\n                     ##   ## ##        ##   ##    ###\n                     ##############          #############\n\nCreating your keys.\nCreating your keys:           [####################################]  1/1\nCreating your keystores:      [####################################]  1/1\nCreating your depositdata:  [####################################]  1/1\nVerifying your keystores:     [####################################]  1/1\nVerifying your deposits:      [####################################]  1/1\n\nSuccess!\nYour keys can be found at: /app/validator_keys\n\n\nPress any key.\n")),(0,i.kt)("p",null,"The above logs mark the end of the staking-deposit-cli execution and Sedge retakes control of the flow:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-logs"},"2022-XX-XX 00:00:00 -- [INFO] deposit-cli tool exited\n# highlight-next-line\n2022-XX-XX 00:00:00 -- [INFO] If everything went well, your keys can be found at: /home/sedge/docker-compose-scripts/keystore/validator_keys\n2022-XX-XX 00:00:00 -- [INFO] keystore_password.txt on keystore folder created with provided password\n2022-XX-XX 00:00:00 -- [WARN] In case you used custom paths for the 'cli' or the 'keys' commands, please review if the keystore path in the generated .env file points to the generated keystore folder (the .env key should be KEYSTORE_DIR). If not, change the path in the .env file to the correct one.\n")),(0,i.kt)("p",null,"As we stick to default configuration values all the time, we can ignore the final log. "),(0,i.kt)("p",null,"Your keystore folder should look similar to this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"docker-compose-scripts\n    \u2514\u2500\u2500 keystore\n        \u251c\u2500\u2500 keystore_password.txt\n        \u2514\u2500\u2500 validator_keys\n            \u251c\u2500\u2500 deposit_data-1659326409.json\n            \u2514\u2500\u2500 keystore-m_12381_3600_0_0_0-1659326408.json\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"A guide for using our own experimental code for keystore generation is coming soon!")),(0,i.kt)("h3",{id:"6-final-steps"},"6. Final steps"),(0,i.kt)("p",null,"When the execution and consensus clients are finally synced you will see the following logs:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-logs"},"2022-XX-XX 00:00:00 -- [INFO] [ETH2 Monitor] [TrackSync] Tracking sync progress of consensus nodes...\n2022-XX-XX 00:00:00 -- [INFO] [ETH2 Monitor] [TrackSync] Endpoint http://172.19.0.2:4000 is synced\n2022-XX-XX 00:00:00 -- [INFO] [ETH2 Monitor] [TrackSync] Tracking sync progress of execution nodes...\n2022-XX-XX 00:00:00 -- [INFO] [ETH2 Monitor] [TrackSync] Endpoint http://172.19.0.3:8545 is synced\n# highlight-next-line\n2022-XX-XX 00:00:00 -- [INFO] Execution and Consensus clients are synced, proceeding to start validator node\n2022-XX-XX 00:00:00 -- [INFO] Instructions for running validator service of docker-compose script\n\ndocker compose -f docker-compose-scripts/docker-compose.yml up -d validator\n\n# highlight-next-line\n? Run validator service? [Y/n]\n")),(0,i.kt)("p",null,"Now you can proceed and finish the setup by pressing ",(0,i.kt)("inlineCode",{parentName:"p"},"Y"),". This will run the validator service with it your validator client will be up and running. Make sure you created or prepared the keystore folder before this step. If you forgot to do it you can take your time, prepare the keystore folder and then press ",(0,i.kt)("inlineCode",{parentName:"p"},"Y"),". This will also take you to the final logs, which describe how the validator is being run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-logs"},'2022-XX-XX 00:00:00 -- [INFO] Checking if docker engine is on\n2022-XX-XX 00:00:00 -- [INFO] Running command: docker ps -a\n2022-XX-XX 00:00:00 -- [INFO] Running command: docker compose -f docker-compose-scripts/docker-compose.yml up -d validator\n[+] Running 3/3\n\u283f Container config_custom_network    Exited                                                                                                       2.8s\n\u283f Container validator-import-client  Exited                                                                                                       3.9s\n\u283f Container validator-client         Started                                                                                                      4.3s\n2022-XX-XX 00:00:00 -- [INFO] Running command: docker compose -f docker-compose-scripts/docker-compose.yml ps --filter status=running\n2022-XX-XX 00:00:00 -- [DEBU] Running command with sudo.\nNAME                COMMAND                  SERVICE             STATUS              PORTS\nconsensus-client    "lighthouse bn --dis\u2026"   consensus           running             0.0.0.0:5054->5054/tcp, :::5054->5054/tcp, 4000/tcp, 0.0.0.0:9000->9000/tcp, :::9000->9000/tcp, 0.0.0.0:9000->9000/udp, :::9000->9000/udp\nexecution-client    "./Nethermind.Runner\u2026"   execution           running             8545/tcp, 8551/tcp, 0.0.0.0:30303->30303/tcp, 0.0.0.0:30303->30303/udp, :::30303->30303/tcp, :::30303->30303/udp\nvalidator-client    "lighthouse vc --net\u2026"   validator           running             0.0.0.0:5056->5056/tcp, :::5056->5056/tcp\n2022-XX-XX 00:00:00 -- [INFO] \nValidator is up. Remember to set up the keystore folder and to make the deposit. If something went wrong and your validator node is down, don\'t panic! Short downtimes are not very bad. Check the logs and try to fix the errors. Make sure errors are not related to connection issues with the consensus nodes or related to the keystore folder path or validator data directory. You can start the validator again using the instructions displayed by the tool.\n\nHappy Staking!\n')),(0,i.kt)("h3",{id:"conclusions"},"Conclusions"),(0,i.kt)("p",null,"Congratulations, you just installed and executed your first validator (and Ethereum full node) using Sedge. The only thing left is making the ETH deposit using the ",(0,i.kt)("inlineCode",{parentName:"p"},"deposit_data.json")," you just generated and wait for the validator to be registered in the network."))}h.isMDXComponent=!0}}]);