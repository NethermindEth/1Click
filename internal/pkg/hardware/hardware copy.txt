/*
Copyright 2022 Nethermind

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package hardware

import (
	
	"fmt"
	"os/exec"
	"runtime"
	"strconv"
	"strings"
)
type HardwareMetrics struct {
	CPUs int
	TotalRam uint64
	FreeRAM uint64
	Disks []DiskInfo
}
type DiskInfo struct {
	Name string
	Space uint64
	Free uint64
	Mount string
}
func GetHardwareMetrics() (*HardwareMetrics,error){
	metrics:= &HardwareMetrics{}
	metrics.CPUs = runtime.NumCPU()
	totalRam ,err:= GetTotalRAM()
	if err!=nil {
		return nil,err
	}
	metrics.TotalRam = totalRam
	freeRam,err:= GetFreeRAM()
	if(err != nil){
		return nil,err
	} 
	metrics.FreeRAM = freeRam
	
	disks,err:=GetDiskInfo()
	if(err != nil){
		return nil,err
	}
	metrics.Disks = disks
	return metrics,nil

}

func GetTotalRAM()(uint64,error) {
	out,err:=exec.Command("free","-b").Output();
	if err!=nil {
		return  0 , err
	}
	lines:= strings.Split(string(out),"\n");
	if len(lines)<2{
		return 0,fmt.Errorf("unexpected error from terminal :(")
	}
	fields := strings.Fields(lines[1]);
	if len(fields)<2{
		return 0,fmt.Errorf("Unexpected error from terminal :(")

	}
	total,err:=strconv.ParseUint(fields[1],10,64);
	if err!=nil {
		return 0 ,err
	}
	return total,nil


}

func GetFreeRAM() (uint64,error){
	out,err:=exec.Command("free","-b").Output()
	if err!= nil {
		return 0,err

	}
	lines := strings.Split(string(out),"\n");
	if len(lines) <2 {
		return 0,fmt.Errorf("unexpected error from terminal :(")
	}
	fields := strings.Fields(lines[2]);
	if len(fields)<4{
		return 0,fmt.Errorf("Unexpected error from terminal :(")

	}
	free,err:= strconv.ParseUint(fields[3],10,64)
	if err!=nil {
		return 0,err
	}
	return free,nil

}

func GetDiskInfo() ([]DiskInfo,error){
	out,err:=exec.Command("df","-BM").Output()
	if err!=nil {
		return nil,err
	}
	lines:= strings.Split(string(out),"\n")
	disks:= make([]DiskInfo,0,len(lines)-1)
	for _,line := range lines[1:]{
		fields := strings.Fields(line)
		if(len(fields)<6) {
			continue
		}
		sizeStr:= strings.TrimSuffix(fields[1],"M")
		size,err:= strconv.ParseUint(sizeStr,10,64);
		if err!=nil {
			return nil,err
		}
		freeStr:= strings.TrimSuffix(fields[3],"M")
		free,err:= strconv.ParseUint(freeStr,10,64);
		if err!=nil {
			return nil,err
		}
		disk:= DiskInfo{
			Name:fields[0],
			Space: size,
			Free:free,
			Mount:fields[5],
		}
		disks = append(disks,disk)
	}
	return disks,nil
}

