// Code generated by MockGen. DO NOT EDIT.
// Source: prompter.go

// Package ui is a generated GoMock package.
package ui

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPrompter is a mock of Prompter interface.
type MockPrompter struct {
	ctrl     *gomock.Controller
	recorder *MockPrompterMockRecorder
}

// MockPrompterMockRecorder is the mock recorder for MockPrompter.
type MockPrompterMockRecorder struct {
	mock *MockPrompter
}

// NewMockPrompter creates a new mock instance.
func NewMockPrompter(ctrl *gomock.Controller) *MockPrompter {
	mock := &MockPrompter{ctrl: ctrl}
	mock.recorder = &MockPrompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrompter) EXPECT() *MockPrompterMockRecorder {
	return m.recorder
}

// Confirm mocks base method.
func (m *MockPrompter) Confirm(arg0 string, arg1 bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Confirm indicates an expected call of Confirm.
func (mr *MockPrompterMockRecorder) Confirm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockPrompter)(nil).Confirm), arg0, arg1)
}

// EthAddress mocks base method.
func (m *MockPrompter) EthAddress(prompt, defaultValue string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EthAddress", prompt, defaultValue)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EthAddress indicates an expected call of EthAddress.
func (mr *MockPrompterMockRecorder) EthAddress(prompt, defaultValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EthAddress", reflect.TypeOf((*MockPrompter)(nil).EthAddress), prompt, defaultValue)
}

// Input mocks base method.
func (m *MockPrompter) Input(prompt, defaultValue string, required bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input", prompt, defaultValue, required)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Input indicates an expected call of Input.
func (mr *MockPrompterMockRecorder) Input(prompt, defaultValue, required interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockPrompter)(nil).Input), prompt, defaultValue, required)
}

// InputFilePath mocks base method.
func (m *MockPrompter) InputFilePath(prompt, defaultValue string, required bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputFilePath", prompt, defaultValue, required)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InputFilePath indicates an expected call of InputFilePath.
func (mr *MockPrompterMockRecorder) InputFilePath(prompt, defaultValue, required interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputFilePath", reflect.TypeOf((*MockPrompter)(nil).InputFilePath), prompt, defaultValue, required)
}

// InputInt64 mocks base method.
func (m *MockPrompter) InputInt64(prompt string, defaultValue int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputInt64", prompt, defaultValue)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InputInt64 indicates an expected call of InputInt64.
func (mr *MockPrompterMockRecorder) InputInt64(prompt, defaultValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputInt64", reflect.TypeOf((*MockPrompter)(nil).InputInt64), prompt, defaultValue)
}

// InputSecret mocks base method.
func (m *MockPrompter) InputSecret(prompt string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputSecret", prompt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InputSecret indicates an expected call of InputSecret.
func (mr *MockPrompterMockRecorder) InputSecret(prompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputSecret", reflect.TypeOf((*MockPrompter)(nil).InputSecret), prompt)
}

// Select mocks base method.
func (m *MockPrompter) Select(message, defaultValue string, options []string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", message, defaultValue, options)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockPrompterMockRecorder) Select(message, defaultValue, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockPrompter)(nil).Select), message, defaultValue, options)
}
