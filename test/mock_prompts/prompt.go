// Code generated by MockGen. DO NOT EDIT.
// Source: ./cli/prompts/prompt.go

// Package mock_prompts is a generated GoMock package.
package mock_prompts

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPrompt is a mock of Prompt interface.
type MockPrompt struct {
	ctrl     *gomock.Controller
	recorder *MockPromptMockRecorder
}

// MockPromptMockRecorder is the mock recorder for MockPrompt.
type MockPromptMockRecorder struct {
	mock *MockPrompt
}

// NewMockPrompt creates a new mock instance.
func NewMockPrompt(ctrl *gomock.Controller) *MockPrompt {
	mock := &MockPrompt{ctrl: ctrl}
	mock.recorder = &MockPromptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrompt) EXPECT() *MockPromptMockRecorder {
	return m.recorder
}

// Confirm mocks base method.
func (m *MockPrompt) Confirm(label string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", label)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Confirm indicates an expected call of Confirm.
func (mr *MockPromptMockRecorder) Confirm(label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockPrompt)(nil).Confirm), label)
}

// Eth1Withdrawal mocks base method.
func (m *MockPrompt) Eth1Withdrawal() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eth1Withdrawal")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Eth1Withdrawal indicates an expected call of Eth1Withdrawal.
func (mr *MockPromptMockRecorder) Eth1Withdrawal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eth1Withdrawal", reflect.TypeOf((*MockPrompt)(nil).Eth1Withdrawal))
}

// ExistingVal mocks base method.
func (m *MockPrompt) ExistingVal() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistingVal")
	ret0, _ := ret[0].(int64)
	return ret0
}

// ExistingVal indicates an expected call of ExistingVal.
func (mr *MockPromptMockRecorder) ExistingVal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistingVal", reflect.TypeOf((*MockPrompt)(nil).ExistingVal))
}

// FeeRecipient mocks base method.
func (m *MockPrompt) FeeRecipient() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeeRecipient")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeeRecipient indicates an expected call of FeeRecipient.
func (mr *MockPromptMockRecorder) FeeRecipient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeeRecipient", reflect.TypeOf((*MockPrompt)(nil).FeeRecipient))
}

// Input mocks base method.
func (m *MockPrompt) Input(label string, required bool, defaultValue string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input", label, required, defaultValue)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Input indicates an expected call of Input.
func (mr *MockPromptMockRecorder) Input(label, required, defaultValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockPrompt)(nil).Input), label, required, defaultValue)
}

// InputFilePath mocks base method.
func (m *MockPrompt) InputFilePath(label string, required bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputFilePath", label, required)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InputFilePath indicates an expected call of InputFilePath.
func (mr *MockPromptMockRecorder) InputFilePath(label, required interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputFilePath", reflect.TypeOf((*MockPrompt)(nil).InputFilePath), label, required)
}

// InputHide mocks base method.
func (m *MockPrompt) InputHide(label string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputHide", label)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InputHide indicates an expected call of InputHide.
func (mr *MockPromptMockRecorder) InputHide(label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputHide", reflect.TypeOf((*MockPrompt)(nil).InputHide), label)
}

// InputNumber mocks base method.
func (m *MockPrompt) InputNumber(label string, defaultValue int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputNumber", label, defaultValue)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InputNumber indicates an expected call of InputNumber.
func (mr *MockPromptMockRecorder) InputNumber(label, defaultValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputNumber", reflect.TypeOf((*MockPrompt)(nil).InputNumber), label, defaultValue)
}

// NumberVal mocks base method.
func (m *MockPrompt) NumberVal() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberVal")
	ret0, _ := ret[0].(int64)
	return ret0
}

// NumberVal indicates an expected call of NumberVal.
func (mr *MockPromptMockRecorder) NumberVal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberVal", reflect.TypeOf((*MockPrompt)(nil).NumberVal))
}

// Passphrase mocks base method.
func (m *MockPrompt) Passphrase() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Passphrase")
	ret0, _ := ret[0].(string)
	return ret0
}

// Passphrase indicates an expected call of Passphrase.
func (mr *MockPromptMockRecorder) Passphrase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Passphrase", reflect.TypeOf((*MockPrompt)(nil).Passphrase))
}

// Select mocks base method.
func (m *MockPrompt) Select(label string, options ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{label}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockPromptMockRecorder) Select(label interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{label}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockPrompt)(nil).Select), varargs...)
}
